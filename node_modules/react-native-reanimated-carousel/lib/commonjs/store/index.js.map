{"version":3,"sources":["index.tsx"],"names":["GlobalStateContext","React","createContext","GlobalStateProvider","children","value","containerSize","width","height","itemDimensions","updateItemDimensions","index","dimensions","updateContainerSize","layout","useGlobalState","context","useContext","Error"],"mappings":"+TAAA,oDAEA,8D,mLAmBO,GAAMA,CAAAA,kBAAkB,CAAGC,eAAMC,aAAN,CAA8B,EAA9B,CAA3B,C,0xCAEA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,MAM7B,IALJC,CAAAA,QAKI,MALJA,QAKI,CAJJC,KAII,MAJJA,KAII,CACJ,GAAMC,CAAAA,aAAa,CAAG,0CAAkD,CAAEC,KAAK,CAAE,CAAT,CAAYC,MAAM,CAAE,CAApB,CAAlD,CAAtB,CACA,GAAMC,CAAAA,cAAc,CAAG,0CAA+B,EAA/B,CAAvB,CAEA,GAAMC,CAAAA,oBAAoB,CAAG,+EAACC,KAAD,CAAgBC,UAAhB,CAAkE,CAG7FH,cAAc,CAACJ,KAAf,kBAA4BI,cAAc,CAACJ,KAA3C,iCAAmDM,KAAnD,CAA2DC,UAA3D,GACD,CAJ4B,qCAG3BH,cAH2B,8IAAH,EAA1B,CAMA,GAAMI,CAAAA,mBAAmB,CAAG,+EAACD,UAAD,CAAmD,CAE7EN,aAAa,CAACD,KAAd,CAAsBO,UAAtB,CACD,CAH2B,oCAE1BN,aAF0B,4IAAH,EAAzB,CAKA,MACE,oBAAC,kBAAD,CAAoB,QAApB,EACE,KAAK,kBACAD,KADA,EAEHS,MAAM,CAAE,CAAER,aAAa,CAAbA,aAAF,CAAiBG,cAAc,CAAdA,cAAjB,CAAiCC,oBAAoB,CAApBA,oBAAjC,CAAuDG,mBAAmB,CAAnBA,mBAAvD,CAFL,EADP,UAMGT,QANH,EADF,CAUD,CA/BM,C,gDAiCA,GAAMW,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAClC,GAAMC,CAAAA,OAAO,CAAGf,eAAMgB,UAAN,CAAiBjB,kBAAjB,CAAhB,CAEA,GAAI,CAACgB,OAAL,CAAc,CACZ,KAAM,IAAIE,CAAAA,KAAJ,CAAU,0DAAV,CAAN,CACD,CAED,MAAOF,CAAAA,OAAP,CACD,CARM,C","sourcesContent":["import React from \"react\";\n\nimport { SharedValue, useSharedValue } from \"react-native-reanimated\";\nimport type { TInitializeCarouselProps } from \"../hooks/useInitProps\";\n\ntype ItemDimensions = Record<number, { width: number; height: number }>;\n\nexport interface IContext {\n  props: TInitializeCarouselProps<any>;\n  common: {\n    size: number;\n    validLength: number;\n  };\n  layout: {\n    containerSize: SharedValue<{ width: number; height: number }>;\n    updateContainerSize: (dimensions: { width: number; height: number }) => void;\n    itemDimensions: SharedValue<ItemDimensions>;\n    updateItemDimensions: (index: number, dimensions: { width: number; height: number }) => void;\n  };\n}\n\nexport const GlobalStateContext = React.createContext<IContext>({} as IContext);\n\nexport const GlobalStateProvider = ({\n  children,\n  value,\n}: {\n  children: React.ReactNode;\n  value: Pick<IContext, \"props\" | \"common\">;\n}) => {\n  const containerSize = useSharedValue<{ width: number; height: number }>({ width: 0, height: 0 });\n  const itemDimensions = useSharedValue<ItemDimensions>({});\n\n  const updateItemDimensions = (index: number, dimensions: { width: number; height: number }) => {\n    \"worklet\";\n\n    itemDimensions.value = { ...itemDimensions.value, [index]: dimensions };\n  };\n\n  const updateContainerSize = (dimensions: { width: number; height: number }) => {\n    \"worklet\";\n    containerSize.value = dimensions;\n  };\n\n  return (\n    <GlobalStateContext.Provider\n      value={{\n        ...value,\n        layout: { containerSize, itemDimensions, updateItemDimensions, updateContainerSize },\n      }}\n    >\n      {children}\n    </GlobalStateContext.Provider>\n  );\n};\n\nexport const useGlobalState = () => {\n  const context = React.useContext(GlobalStateContext);\n\n  if (!context) {\n    throw new Error(\"useGlobalState must be used within a GlobalStateProvider\");\n  }\n\n  return context;\n};\n"]}