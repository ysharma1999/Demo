{"version":3,"sources":["usePanGestureProxy.ts"],"names":["usePanGestureProxy","customization","onConfigurePanGesture","onGestureStart","onGestureUpdate","onGestureEnd","options","gesture","Gesture","Pan","withTestId","originalGestures","onBegin","onStart","onUpdate","onEnd","onFinalize","userDefinedConflictGestures","undefined","fakeOnBegin","cb","fakeOnStart","fakeOnUpdate","fakeOnEnd","fakeOnFinalize","e","success"],"mappings":"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","sourcesContent":["import { useMemo } from \"react\";\nimport type {\n  GestureStateChangeEvent,\n  GestureUpdateEvent,\n  PanGesture,\n  PanGestureHandlerEventPayload,\n} from \"react-native-gesture-handler\";\nimport { Gesture } from \"react-native-gesture-handler\";\n\nimport type { GestureConfig } from \"./useUpdateGestureConfig\";\nimport { useUpdateGestureConfig } from \"./useUpdateGestureConfig\";\n\nexport const usePanGestureProxy = (customization: {\n  onConfigurePanGesture?: (gesture: PanGesture) => void;\n  onGestureStart: (event: GestureStateChangeEvent<PanGestureHandlerEventPayload>) => void;\n  onGestureUpdate: (event: GestureUpdateEvent<PanGestureHandlerEventPayload>) => void;\n  onGestureEnd: (\n    event: GestureStateChangeEvent<PanGestureHandlerEventPayload>,\n    success: boolean\n  ) => void;\n  options?: GestureConfig;\n}) => {\n  const {\n    onConfigurePanGesture,\n    onGestureStart,\n    onGestureUpdate,\n    onGestureEnd,\n    options = {},\n  } = customization;\n\n  const gesture = useMemo(() => {\n    const gesture = Gesture.Pan().withTestId(\"rnrc-gesture-handler\");\n\n    // Save the original gesture callbacks\n    const originalGestures = {\n      onBegin: gesture.onBegin,\n      onStart: gesture.onStart,\n      onUpdate: gesture.onUpdate,\n      onEnd: gesture.onEnd,\n      onFinalize: gesture.onFinalize,\n    };\n\n    // Save the user defined gesture callbacks\n    const userDefinedConflictGestures: {\n      onBegin?: Parameters<(typeof gesture)[\"onBegin\"]>[0];\n      onStart?: Parameters<(typeof gesture)[\"onStart\"]>[0];\n      onUpdate?: Parameters<(typeof gesture)[\"onUpdate\"]>[0];\n      onEnd?: Parameters<(typeof gesture)[\"onEnd\"]>[0];\n      onFinalize?: Parameters<(typeof gesture)[\"onFinalize\"]>[0];\n    } = {\n      onBegin: undefined,\n      onStart: undefined,\n      onUpdate: undefined,\n      onEnd: undefined,\n      onFinalize: undefined,\n    };\n\n    const fakeOnBegin: typeof gesture.onBegin = (cb) => {\n      // Using fakeOnBegin to save the user defined callback\n      userDefinedConflictGestures.onBegin = cb;\n      return gesture;\n    };\n\n    const fakeOnStart: typeof gesture.onStart = (cb) => {\n      // Using fakeOnStart to save the user defined callback\n      userDefinedConflictGestures.onStart = cb;\n      return gesture;\n    };\n\n    const fakeOnUpdate: typeof gesture.onUpdate = (cb) => {\n      // Using fakeOnUpdate to save the user defined callback\n      userDefinedConflictGestures.onUpdate = cb;\n      return gesture;\n    };\n\n    const fakeOnEnd: typeof gesture.onEnd = (cb) => {\n      // Using fakeOnEnd to save the user defined callback\n      userDefinedConflictGestures.onEnd = cb;\n      return gesture;\n    };\n\n    const fakeOnFinalize: typeof gesture.onFinalize = (cb) => {\n      // Using fakeOnFinalize to save the user defined callback\n      userDefinedConflictGestures.onFinalize = cb;\n      return gesture;\n    };\n\n    // Setup the fake callbacks\n    gesture.onBegin = fakeOnBegin;\n    gesture.onStart = fakeOnStart;\n    gesture.onUpdate = fakeOnUpdate;\n    gesture.onEnd = fakeOnEnd;\n    gesture.onFinalize = fakeOnFinalize;\n\n    if (onConfigurePanGesture)\n      // Get the gesture with the user defined configuration\n      onConfigurePanGesture(gesture);\n\n    // Restore the original callbacks\n    gesture.onBegin = originalGestures.onBegin;\n    gesture.onStart = originalGestures.onStart;\n    gesture.onUpdate = originalGestures.onUpdate;\n    gesture.onEnd = originalGestures.onEnd;\n    gesture.onFinalize = originalGestures.onFinalize;\n\n    // Setup the original callbacks with the user defined callbacks\n    gesture\n      .onBegin((e) => {\n        \"worklet\";\n\n        if (userDefinedConflictGestures.onBegin) userDefinedConflictGestures.onBegin(e);\n      })\n      .onStart((e) => {\n        \"worklet\";\n        onGestureStart(e);\n\n        if (userDefinedConflictGestures.onStart) userDefinedConflictGestures.onStart(e);\n      })\n      .onUpdate((e) => {\n        \"worklet\";\n        onGestureUpdate(e);\n\n        if (userDefinedConflictGestures.onUpdate) userDefinedConflictGestures.onUpdate(e);\n      })\n      .onEnd((e, success) => {\n        \"worklet\";\n        onGestureEnd(e, success);\n\n        if (userDefinedConflictGestures.onEnd) userDefinedConflictGestures.onEnd(e, success);\n      })\n      .onFinalize((e, success) => {\n        \"worklet\";\n\n        if (userDefinedConflictGestures.onFinalize)\n          userDefinedConflictGestures.onFinalize(e, success);\n      });\n\n    return gesture;\n  }, [onGestureStart, onGestureUpdate, onGestureEnd, onConfigurePanGesture]);\n\n  useUpdateGestureConfig(gesture, options);\n\n  return gesture;\n};\n"]}