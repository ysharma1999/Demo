{"version":3,"sources":["useCheckMounted.test.ts"],"names":["describe","it","result","expect","current","toBe","unmount","rerender","hook1","hook2"],"mappings":"AAAA,wDAEA,kDAEAA,QAAQ,CAAC,iBAAD,CAAoB,UAAM,CAChCC,EAAE,CAAC,wCAAD,CAA2C,UAAM,CACjD,gBAAmB,2BAAW,iBAAM,sCAAN,EAAX,CAAnB,CAAQC,MAAR,aAAQA,MAAR,CAEAC,MAAM,CAACD,MAAM,CAACE,OAAP,CAAeA,OAAhB,CAAN,CAA+BC,IAA/B,CAAoC,IAApC,EACD,CAJC,CAAF,CAMAJ,EAAE,CAAC,mCAAD,CAAsC,UAAM,CAC5C,iBAA4B,2BAAW,iBAAM,sCAAN,EAAX,CAA5B,CAAQC,MAAR,cAAQA,MAAR,CAAgBI,OAAhB,cAAgBA,OAAhB,CAEAH,MAAM,CAACD,MAAM,CAACE,OAAP,CAAeA,OAAhB,CAAN,CAA+BC,IAA/B,CAAoC,IAApC,EAEAC,OAAO,GAEPH,MAAM,CAACD,MAAM,CAACE,OAAP,CAAeA,OAAhB,CAAN,CAA+BC,IAA/B,CAAoC,KAApC,EACD,CARC,CAAF,CAUAJ,EAAE,CAAC,0DAAD,CAA6D,UAAM,CACnE,iBAA6B,2BAAW,iBAAM,sCAAN,EAAX,CAA7B,CAAQC,MAAR,cAAQA,MAAR,CAAgBK,QAAhB,cAAgBA,QAAhB,CAEAJ,MAAM,CAACD,MAAM,CAACE,OAAP,CAAeA,OAAhB,CAAN,CAA+BC,IAA/B,CAAoC,IAApC,EAEAE,QAAQ,GAERJ,MAAM,CAACD,MAAM,CAACE,OAAP,CAAeA,OAAhB,CAAN,CAA+BC,IAA/B,CAAoC,IAApC,EACD,CARC,CAAF,CAUAJ,EAAE,CAAC,6CAAD,CAAgD,UAAM,CAEtD,GAAMO,CAAAA,KAAK,CAAG,2BAAW,iBAAM,sCAAN,EAAX,CAAd,CACAL,MAAM,CAACK,KAAK,CAACN,MAAN,CAAaE,OAAb,CAAqBA,OAAtB,CAAN,CAAqCC,IAArC,CAA0C,IAA1C,EAEAG,KAAK,CAACF,OAAN,GACAH,MAAM,CAACK,KAAK,CAACN,MAAN,CAAaE,OAAb,CAAqBA,OAAtB,CAAN,CAAqCC,IAArC,CAA0C,KAA1C,EAGA,GAAMI,CAAAA,KAAK,CAAG,2BAAW,iBAAM,sCAAN,EAAX,CAAd,CACAN,MAAM,CAACM,KAAK,CAACP,MAAN,CAAaE,OAAb,CAAqBA,OAAtB,CAAN,CAAqCC,IAArC,CAA0C,IAA1C,EAEAI,KAAK,CAACH,OAAN,GACAH,MAAM,CAACM,KAAK,CAACP,MAAN,CAAaE,OAAb,CAAqBA,OAAtB,CAAN,CAAqCC,IAArC,CAA0C,KAA1C,EACD,CAdC,CAAF,CAeD,CA1CO,CAAR","sourcesContent":["import { renderHook } from \"@testing-library/react-hooks\";\n\nimport { useCheckMounted } from \"./useCheckMounted\";\n\ndescribe(\"useCheckMounted\", () => {\n  it(\"should be mounted after initialization\", () => {\n    const { result } = renderHook(() => useCheckMounted());\n\n    expect(result.current.current).toBe(true);\n  });\n\n  it(\"should be unmounted after cleanup\", () => {\n    const { result, unmount } = renderHook(() => useCheckMounted());\n\n    expect(result.current.current).toBe(true);\n\n    unmount();\n\n    expect(result.current.current).toBe(false);\n  });\n\n  it(\"should maintain mounted state during component lifecycle\", () => {\n    const { result, rerender } = renderHook(() => useCheckMounted());\n\n    expect(result.current.current).toBe(true);\n\n    rerender();\n\n    expect(result.current.current).toBe(true);\n  });\n\n  it(\"should handle multiple mount/unmount cycles\", () => {\n    // First instance\n    const hook1 = renderHook(() => useCheckMounted());\n    expect(hook1.result.current.current).toBe(true);\n\n    hook1.unmount();\n    expect(hook1.result.current.current).toBe(false);\n\n    // Second instance\n    const hook2 = renderHook(() => useCheckMounted());\n    expect(hook2.result.current.current).toBe(true);\n\n    hook2.unmount();\n    expect(hook2.result.current.current).toBe(false);\n  });\n});\n"]}