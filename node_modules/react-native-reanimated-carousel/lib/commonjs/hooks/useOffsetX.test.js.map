{"version":3,"sources":["useOffsetX.test.ts"],"names":["describe","it","hook","range","negativeRange","positiveRange","inputs","Array","from","length","map","_","index","config","dataLength","handlerOffset","loop","size","input","expected","result","current","v","value","slice","expect","toMatchInlineSnapshot"],"mappings":"qLAAA,8DAEA,wDAGA,wCAGAA,QAAQ,CAAC,gBAAD,CAAmB,UAAM,CAC/BC,EAAE,CAAC,kCAAD,gCAAqC,WAAY,CACjD,GAAMC,CAAAA,IAAI,CAAG,2BAAW,UAAM,CAC5B,GAAMC,CAAAA,KAAK,CAAG,0CAAe,CAC3BC,aAAa,CAAE,CAAC,CAAD,CAAI,CAAJ,CADY,CAE3BC,aAAa,CAAE,CAAC,CAAD,CAAI,CAAJ,CAFY,CAAf,CAAd,CAIA,GAAMC,CAAAA,MAGJ,CAAGC,KAAK,CAACC,IAAN,CAAW,CAAEC,MAAM,CAAE,EAAV,CAAX,EAA2BC,GAA3B,CAA+B,SAACC,CAAD,CAAIC,KAAJ,QAAe,CACjDC,MAAM,CAAE,CACNC,UAAU,CAAE,EADN,CAENC,aAAa,CAAE,0CAAe,CAAC,CAAhB,CAFT,CAGNH,KAAK,CAALA,KAHM,CAINI,IAAI,CAAE,KAJA,CAKNC,IAAI,CAAE,GALA,CADyC,CAQjDd,KAAK,CAALA,KARiD,CAAf,EAA/B,CAHL,CAcA,MAAOG,CAAAA,MAAM,CAACI,GAAP,CAAW,SAACQ,KAAD,CAAW,CAC3B,GAAQL,CAAAA,MAAR,CAA0BK,KAA1B,CAAQL,MAAR,CAAgBV,KAAhB,CAA0Be,KAA1B,CAAgBf,KAAhB,CAEA,MAAO,2BAAWU,MAAX,CAAmBV,KAAnB,CAAP,CACD,CAJM,CAAP,CAKD,CAxBY,CAAb,CA0BA,GAAMgB,CAAAA,QAAQ,CAAGjB,IAAI,CAACkB,MAAL,CAAYC,OAAZ,CAAoBX,GAApB,CAAwB,SAACY,CAAD,QAAOA,CAAAA,CAAC,CAACC,KAAT,EAAxB,EAAwCC,KAAxC,EAAjB,CAEAC,MAAM,CAACN,QAAD,CAAN,CAAiBO,qBAAjB,CAAwC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAbI,EAcD,CA3CC,EAAF,CA4CD,CA7CO,CAAR","sourcesContent":["import { useSharedValue } from \"react-native-reanimated\";\n\nimport { renderHook } from \"@testing-library/react-hooks\";\n\nimport type { IOpts } from \"./useOffsetX\";\nimport { useOffsetX } from \"./useOffsetX\";\nimport type { IVisibleRanges } from \"./useVisibleRanges\";\n\ndescribe(\"useSharedValue\", () => {\n  it(\"should return the correct values\", async () => {\n    const hook = renderHook(() => {\n      const range = useSharedValue({\n        negativeRange: [7, 9],\n        positiveRange: [0, 3],\n      }) as IVisibleRanges;\n      const inputs: Array<{\n        config: IOpts;\n        range: IVisibleRanges;\n      }> = Array.from({ length: 10 }).map((_, index) => ({\n        config: {\n          dataLength: 10,\n          handlerOffset: useSharedValue(-0),\n          index,\n          loop: false,\n          size: 393,\n        },\n        range,\n      }));\n\n      return inputs.map((input) => {\n        const { config, range } = input;\n\n        return useOffsetX(config, range);\n      });\n    });\n\n    const expected = hook.result.current.map((v) => v.value).slice();\n\n    expect(expected).toMatchInlineSnapshot(`\n            [\n              0,\n              393,\n              786,\n              1179,\n              9007199254740991,\n              9007199254740991,\n              9007199254740991,\n              2751,\n              3144,\n              3537,\n            ]\n        `);\n  });\n});\n"]}