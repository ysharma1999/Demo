{"version":3,"sources":["useVisibleRanges.tsx"],"names":["useVisibleRanges","options","total","viewSize","translation","_windowSize","windowSize","loop","cachedRanges","ranges","positiveCount","Math","round","negativeCount","currentIndex","value","newRanges","negativeRange","positiveRange","isArraysEqual","current","a","b","length","every","index"],"mappings":"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","sourcesContent":["import { useRef } from \"react\";\nimport type Animated from \"react-native-reanimated\";\nimport { useDerivedValue } from \"react-native-reanimated\";\n\ntype Range = [number, number];\n\nexport interface VisibleRanges {\n  negativeRange: Range;\n  positiveRange: Range;\n}\n\nexport type IVisibleRanges = Animated.SharedValue<VisibleRanges>;\n\nexport function useVisibleRanges(options: {\n  total: number;\n  viewSize: number;\n  windowSize?: number;\n  translation: Animated.SharedValue<number>;\n  loop?: boolean;\n}): IVisibleRanges {\n  const { total = 0, viewSize, translation, windowSize: _windowSize, loop } = options;\n\n  const windowSize = _windowSize ?? total;\n  const cachedRanges = useRef<VisibleRanges>(null!);\n\n  const ranges = useDerivedValue(() => {\n    const positiveCount = Math.round(windowSize / 2);\n    const negativeCount = windowSize - positiveCount;\n\n    let currentIndex = Math.round(-translation.value / viewSize);\n    currentIndex = currentIndex < 0 ? (currentIndex % total) + total : currentIndex;\n\n    let newRanges: VisibleRanges;\n\n    if (!loop) {\n      // Adjusting negative range if the carousel is not loopable.\n      // So, It will be only displayed the positive items.\n      newRanges = {\n        negativeRange: [0 + currentIndex - (windowSize - 1), 0 + currentIndex],\n        positiveRange: [0 + currentIndex, currentIndex + (windowSize - 1)],\n      };\n    } else {\n      const negativeRange: Range = [\n        (currentIndex - negativeCount + total) % total,\n        (currentIndex - 1 + total) % total,\n      ];\n\n      const positiveRange: Range = [\n        (currentIndex + total) % total,\n        (currentIndex + positiveCount + total) % total,\n      ];\n\n      if (negativeRange[0] < total && negativeRange[0] > negativeRange[1]) {\n        negativeRange[1] = total - 1;\n        positiveRange[0] = 0;\n      }\n      if (positiveRange[0] > positiveRange[1]) {\n        negativeRange[1] = total - 1;\n        positiveRange[0] = 0;\n      }\n\n      // console.log({ negativeRange, positiveRange ,total,windowSize,a:total <= _windowSize})\n      newRanges = { negativeRange, positiveRange };\n    }\n\n    if (\n      isArraysEqual(cachedRanges.current?.negativeRange ?? [], newRanges.negativeRange) &&\n      isArraysEqual(cachedRanges.current?.positiveRange ?? [], newRanges.positiveRange)\n    )\n      return cachedRanges.current;\n\n    cachedRanges.current = newRanges;\n    return cachedRanges.current;\n  }, [loop, total, windowSize, translation]);\n\n  return ranges;\n}\n\nfunction isArraysEqual(a: number[], b: number[]): boolean {\n  \"worklet\";\n  if (a.length !== b.length) return false;\n\n  return a.every((value, index) => value === b[index]);\n}\n"]}