{"version":3,"sources":["usePanGestureProxy.test.tsx"],"names":["beforeEach","cleanup","mockedEventHandlers","begin","jest","fn","start","active","end","fail","cancel","finish","mockedEventHandlersFromUser","describe","SingleHandler","handlers","handlersFromUser","treatStartAsUpdate","pan","onConfigurePanGesture","gesture","onBegin","onUpdate","onEnd","onFinalize","withTestId","onGestureStart","onGestureUpdate","onGestureEnd","options","enabled","RacingHandlers","tapHandlers","panHandlers","tap","Gesture","Tap","_","Race","it","state","State","BEGAN","ACTIVE","END","expect","toBeCalledWith","objectContaining","toBeCalled","not","panHandlersFromUser","translationX","toBeCalledTimes","toHaveBeenLastCalledWith","spyOn","console","error","oldState","UNDETERMINED","x","y","toThrow","each","FAILED","CANCELLED","lastState","any","Object","RacingTapAndPan","Exclusive","nthCalledWith","lastCalledWith","anything","toHaveBeenNthCalledWith","toHaveBeenCalledTimes"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Text } from \"react-native\";\nimport type { PanGesture, PanGestureHandler, TapGesture } from \"react-native-gesture-handler\";\nimport {\n  Gesture,\n  GestureDetector,\n  GestureHandlerRootView,\n  State,\n} from \"react-native-gesture-handler\";\n\nimport { cleanup, render } from \"@testing-library/react-native\";\nimport { fireGestureHandler, getByGestureTestId } from \"react-native-gesture-handler/jest-utils\";\n\nimport { usePanGestureProxy } from \"./usePanGestureProxy\";\n\nbeforeEach(cleanup);\n\nconst mockedEventHandlers = () => {\n  return {\n    begin: jest.fn(),\n    start: jest.fn(),\n    active: jest.fn(),\n    end: jest.fn(),\n    fail: jest.fn(),\n    cancel: jest.fn(),\n    finish: jest.fn(),\n  };\n};\n\nconst mockedEventHandlersFromUser = () => {\n  return {\n    begin: jest.fn(),\n    start: jest.fn(),\n    active: jest.fn(),\n    end: jest.fn(),\n    fail: jest.fn(),\n    cancel: jest.fn(),\n    finish: jest.fn(),\n  };\n};\n\ndescribe(\"Using RNGH v2 gesture API\", () => {\n  interface SingleHandlerProps {\n    handlers: ReturnType<typeof mockedEventHandlers>;\n    handlersFromUser: ReturnType<typeof mockedEventHandlers>;\n    treatStartAsUpdate?: boolean;\n  }\n\n  function SingleHandler({ handlers, handlersFromUser, treatStartAsUpdate }: SingleHandlerProps) {\n    const pan = usePanGestureProxy({\n      onConfigurePanGesture: (gesture: PanGesture) => {\n        // This is user's customizations\n        gesture\n          .onBegin(handlersFromUser.begin)\n          .onUpdate(handlersFromUser.active)\n          .onEnd(handlersFromUser.end)\n          .onFinalize(handlers.finish)\n          .withTestId(\"pan\");\n      },\n      onGestureStart: treatStartAsUpdate ? handlers.active : handlers.start,\n      onGestureUpdate: handlers.active,\n      onGestureEnd: handlers.end,\n      options: { enabled: true },\n    });\n\n    return (\n      <GestureHandlerRootView>\n        <GestureDetector gesture={pan}>\n          <Text>v2 API test</Text>\n        </GestureDetector>\n      </GestureHandlerRootView>\n    );\n  }\n\n  interface RacingHandlersProps {\n    tapHandlers: ReturnType<typeof mockedEventHandlers>;\n    panHandlers: ReturnType<typeof mockedEventHandlers>;\n  }\n\n  function RacingHandlers({ tapHandlers, panHandlers }: RacingHandlersProps) {\n    const tap = Gesture.Tap().onBegin(tapHandlers.begin).onEnd(tapHandlers.end).withTestId(\"tap\");\n\n    const pan = usePanGestureProxy({\n      onConfigurePanGesture: (_: PanGesture) => {\n        _.onBegin(panHandlers.begin).onFinalize(panHandlers.finish).withTestId(\"pan\");\n      },\n      onGestureStart: panHandlers.start,\n      onGestureUpdate: panHandlers.active,\n      onGestureEnd: panHandlers.end,\n      options: { enabled: true },\n    });\n\n    return (\n      <GestureHandlerRootView>\n        <GestureDetector gesture={Gesture.Race(tap, pan)}>\n          <Text>v2 API test</Text>\n        </GestureDetector>\n      </GestureHandlerRootView>\n    );\n  }\n\n  it(\"sends events to handlers\", () => {\n    const tapHandlers = mockedEventHandlers();\n    const panHandlers = mockedEventHandlers();\n    render(<RacingHandlers tapHandlers={tapHandlers} panHandlers={panHandlers} />);\n\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n      { state: State.BEGAN },\n      { state: State.ACTIVE },\n      { state: State.END },\n    ]);\n    expect(panHandlers.begin).toBeCalledWith(expect.objectContaining({ state: State.BEGAN }));\n    expect(panHandlers.finish).toBeCalled();\n    expect(tapHandlers.begin).not.toBeCalled();\n  });\n\n  it(\"sends events with additional data to handlers\", () => {\n    const panHandlers = mockedEventHandlers();\n    const panHandlersFromUser = mockedEventHandlersFromUser();\n    render(\n      <SingleHandler\n        handlers={panHandlers}\n        handlersFromUser={panHandlersFromUser}\n        treatStartAsUpdate\n      />\n    );\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n      { state: State.BEGAN, translationX: 0 },\n      { state: State.ACTIVE, translationX: 10 },\n      { translationX: 20 },\n      { translationX: 20 },\n      { state: State.END, translationX: 30 },\n    ]);\n\n    expect(panHandlersFromUser.begin).toBeCalledTimes(1);\n    expect(panHandlersFromUser.active).toBeCalledTimes(2);\n    expect(panHandlersFromUser.end).toBeCalledTimes(1);\n\n    expect(panHandlers.active).toBeCalledTimes(3);\n    expect(panHandlers.active).toHaveBeenLastCalledWith(\n      expect.objectContaining({ translationX: 20 })\n    );\n  });\n\n  it(\"does not include console.error in the output\", () => {\n    // if react-native-gesture-handler detects that some handlers are\n    // workletized and some are not, it will log an error to the\n    // console. We'd like to make sure that this doesn't happen.\n\n    // The error that would be shown looks like:\n    // [react-native-gesture-handler] Some of the callbacks in the gesture are worklets and some are not. Either make sure that all calbacks are marked as 'worklet' if you wish to run them on the UI thread or use '.runOnJS(true)' modifier on the gesture explicitly to run all callbacks on the JS thread.\n\n    const panHandlers = mockedEventHandlers();\n    const panHandlersFromUser = mockedEventHandlersFromUser();\n\n    jest.spyOn(console, \"error\");\n\n    render(\n      <SingleHandler\n        handlers={panHandlers}\n        handlersFromUser={panHandlersFromUser}\n        treatStartAsUpdate\n      />\n    );\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n      { state: State.BEGAN },\n      { state: State.ACTIVE },\n      { state: State.END },\n    ]);\n\n    expect(console.error).not.toBeCalled();\n  });\n});\n\ndescribe(\"Event list validation\", () => {\n  interface SingleHandlerProps {\n    handlers: ReturnType<typeof mockedEventHandlers>;\n    handlersFromUser: ReturnType<typeof mockedEventHandlers>;\n    treatStartAsUpdate?: boolean;\n  }\n\n  function SingleHandler({ handlers, handlersFromUser, treatStartAsUpdate }: SingleHandlerProps) {\n    const pan = usePanGestureProxy({\n      onConfigurePanGesture: (_: PanGesture) => {\n        _.onBegin(handlersFromUser.begin)\n          .onUpdate(handlersFromUser.active)\n          .onEnd(handlersFromUser.end)\n          .onFinalize(handlers.finish)\n          .withTestId(\"pan\");\n      },\n      onGestureStart: treatStartAsUpdate ? handlers.active : handlers.start,\n      onGestureUpdate: handlers.active,\n      onGestureEnd: handlers.end,\n      options: { enabled: true },\n    });\n\n    return (\n      <GestureHandlerRootView>\n        <GestureDetector gesture={pan}>\n          <Text>v2 API test</Text>\n        </GestureDetector>\n      </GestureHandlerRootView>\n    );\n  }\n\n  it(\"throws error when oldState doesn't correspond to previous event's state\", () => {\n    const panHandlers = mockedEventHandlers();\n    const panHandlersFromUser = mockedEventHandlersFromUser();\n    render(<SingleHandler handlers={panHandlers} handlersFromUser={panHandlersFromUser} />);\n\n    expect(() => {\n      fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n        { oldState: State.UNDETERMINED, state: State.BEGAN, x: 0, y: 10 },\n        { oldState: State.UNDETERMINED, state: State.ACTIVE, x: 1, y: 11 },\n      ]);\n    }).toThrow(\"when state changes, oldState should be the same as previous event' state\");\n  });\n\n  it.each([[State.END], [State.FAILED], [State.CANCELLED]])(\n    \"correctly handles events ending with state %s\",\n    (lastState) => {\n      const panHandlers = mockedEventHandlers();\n      const panHandlersFromUser = mockedEventHandlersFromUser();\n      render(<SingleHandler handlers={panHandlers} handlersFromUser={panHandlersFromUser} />);\n      fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n        { state: State.BEGAN },\n        { state: State.ACTIVE },\n        { state: lastState },\n      ]);\n\n      expect(panHandlersFromUser.begin).toBeCalledTimes(1);\n      expect(panHandlersFromUser.active).toBeCalledTimes(0);\n      expect(panHandlersFromUser.end).toBeCalledTimes(1);\n\n      if (lastState === State.END) expect(panHandlers.end).toBeCalled();\n      else expect(panHandlers.finish).toBeCalledWith(expect.any(Object), false);\n    }\n  );\n});\n\ndescribe(\"Filling event list with defaults\", () => {\n  interface RacingTapAndPanProps {\n    handlers: ReturnType<typeof mockedEventHandlers>;\n    treatStartAsUpdate?: boolean;\n  }\n\n  function RacingTapAndPan({ handlers, treatStartAsUpdate }: RacingTapAndPanProps) {\n    const tap = Gesture.Tap().onBegin(handlers.begin).onEnd(handlers.end).withTestId(\"tap\");\n\n    const pan = usePanGestureProxy({\n      onConfigurePanGesture: (_: PanGesture) => {\n        _.onBegin(handlers.begin).onFinalize(handlers.finish).withTestId(\"pan\");\n      },\n      onGestureStart: treatStartAsUpdate ? handlers.active : handlers.start,\n      onGestureUpdate: handlers.active,\n      onGestureEnd: handlers.end,\n      options: { enabled: true },\n    });\n\n    return (\n      <GestureHandlerRootView>\n        <GestureDetector gesture={Gesture.Exclusive(pan, tap)}>\n          <Text>v2 API test</Text>\n        </GestureDetector>\n      </GestureHandlerRootView>\n    );\n  }\n\n  it(\"fills oldState if not passed\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGestureHandler>(getByGestureTestId(\"pan\"), [\n      { state: State.BEGAN },\n      { state: State.ACTIVE },\n      { state: State.ACTIVE },\n      { state: State.ACTIVE },\n      { state: State.END },\n    ]);\n\n    expect(handlers.begin).toBeCalledWith(\n      expect.objectContaining({ oldState: State.UNDETERMINED })\n    );\n    expect(handlers.active).nthCalledWith(1, expect.objectContaining({ oldState: State.BEGAN }));\n    expect(handlers.active).lastCalledWith(\n      expect.not.objectContaining({ oldState: expect.anything() })\n    );\n    expect(handlers.end).toBeCalledWith(expect.objectContaining({ oldState: State.ACTIVE }), true);\n  });\n\n  it(\"fills missing ACTIVE states\", () => {\n    const panHandlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={panHandlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n      { state: State.BEGAN, x: 0, y: 10 },\n      { state: State.ACTIVE, x: 1, y: 11 },\n      { x: 2, y: 12 },\n      { x: 3, y: 13 },\n      { state: State.END, x: 4, y: 14 },\n    ]);\n\n    expect(panHandlers.active).toBeCalledTimes(3);\n    expect(panHandlers.active).toHaveBeenLastCalledWith(expect.objectContaining({ x: 3, y: 13 }));\n  });\n\n  it(\"fills BEGIN and END events for discrete handlers\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<TapGesture>(getByGestureTestId(\"tap\"), [{ x: 5 }]);\n    expect(handlers.begin).toBeCalledTimes(1);\n    expect(handlers.end).toBeCalledTimes(1);\n  });\n\n  it(\"with FAILED event, fills BEGIN event for discrete handlers\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<TapGesture>(getByGestureTestId(\"tap\"), [{ state: State.FAILED }]);\n    expect(handlers.begin).toBeCalledTimes(1);\n    expect(handlers.end).toBeCalledTimes(1);\n    expect(handlers.end).toBeCalledWith(expect.anything(), false);\n  });\n\n  it(\"uses event data from first event in filled BEGIN, ACTIVE events\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [{ x: 120 }]);\n    expect(handlers.begin).toBeCalledWith(expect.objectContaining({ x: 120 }));\n    expect(handlers.active).toHaveBeenNthCalledWith(1, expect.objectContaining({ x: 120 }));\n  });\n\n  it(\"uses event data from last event in filled END events\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [{ x: 120, state: State.FAILED }]);\n    expect(handlers.begin).toBeCalledTimes(1);\n    expect(handlers.active).toBeCalledTimes(1);\n    expect(handlers.end).toBeCalledWith(expect.objectContaining({ x: 120 }), false);\n  });\n\n  it(\"uses event data filled events\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n      { x: 5, y: 15 },\n      { x: 6, y: 16 },\n      { x: 7, y: 17 },\n    ]);\n    expect(handlers.begin).toBeCalledWith(expect.objectContaining({ x: 5, y: 15 }));\n    expect(handlers.active).toBeCalledTimes(3);\n    expect(handlers.end).toBeCalledWith(expect.objectContaining({ x: 7, y: 17 }), true);\n  });\n\n  it(\"fills BEGIN and END events when they're not present, for discrete handlers\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<TapGesture>(getByGestureTestId(\"tap\"));\n    expect(handlers.begin).toBeCalledTimes(1);\n    expect(handlers.end).toHaveBeenCalledTimes(1);\n  });\n\n  it(\"fills BEGIN, ACTIVE and END events when they're not present, for continuous handlers\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"));\n    expect(handlers.begin).toBeCalledTimes(1);\n    expect(handlers.active).toBeCalledTimes(1);\n    expect(handlers.end).toHaveBeenCalledTimes(1);\n  });\n});\n"]}