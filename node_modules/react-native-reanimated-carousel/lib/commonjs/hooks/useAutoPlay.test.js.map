{"version":3,"sources":["useAutoPlay.test.ts"],"names":["describe","beforeEach","jest","useFakeTimers","clearAllMocks","afterEach","clearAllTimers","useRealTimers","mockCarouselController","prev","fn","next","getCurrentIndex","getSharedIndex","scrollTo","it","autoPlay","autoPlayInterval","carouselController","runOnlyPendingTimers","expect","toHaveBeenCalledTimes","toHaveBeenCalledWith","objectContaining","onFinished","any","Function","not","toHaveBeenCalled","autoPlayReverse","unmount","mockClear","result","current","pause","start","advanceTimersByTime","mock","calls","onFinished2"],"mappings":"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","sourcesContent":["import { act, renderHook } from \"@testing-library/react-hooks\";\n\nimport { useAutoPlay } from \"./useAutoPlay\";\n\ndescribe(\"useAutoPlay\", () => {\n  // Mock timer\n  beforeEach(() => {\n    jest.useFakeTimers();\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    jest.clearAllTimers();\n    jest.useRealTimers();\n  });\n\n  // Mock carousel controller\n  const mockCarouselController = {\n    prev: jest.fn(),\n    next: jest.fn(),\n    getCurrentIndex: jest.fn(),\n    getSharedIndex: jest.fn(),\n    scrollTo: jest.fn(),\n  };\n\n  it(\"should start autoplay when autoPlay is true\", () => {\n    renderHook(() =>\n      useAutoPlay({\n        autoPlay: true,\n        autoPlayInterval: 1000,\n        carouselController: mockCarouselController,\n      })\n    );\n\n    act(() => {\n      jest.runOnlyPendingTimers();\n    });\n\n    expect(mockCarouselController.next).toHaveBeenCalledTimes(1);\n    expect(mockCarouselController.next).toHaveBeenCalledWith(\n      expect.objectContaining({\n        onFinished: expect.any(Function),\n      })\n    );\n  });\n\n  it(\"should not start autoplay when autoPlay is false\", () => {\n    renderHook(() =>\n      useAutoPlay({\n        autoPlay: false,\n        autoPlayInterval: 1000,\n        carouselController: mockCarouselController,\n      })\n    );\n\n    act(() => {\n      jest.runOnlyPendingTimers();\n    });\n\n    expect(mockCarouselController.next).not.toHaveBeenCalled();\n  });\n\n  it(\"should play in reverse when autoPlayReverse is true\", () => {\n    renderHook(() =>\n      useAutoPlay({\n        autoPlay: true,\n        autoPlayReverse: true,\n        autoPlayInterval: 1000,\n        carouselController: mockCarouselController,\n      })\n    );\n\n    act(() => {\n      jest.runOnlyPendingTimers();\n    });\n\n    expect(mockCarouselController.prev).toHaveBeenCalledTimes(1);\n    expect(mockCarouselController.next).not.toHaveBeenCalled();\n  });\n\n  it(\"should clear timer on unmount\", () => {\n    const { unmount } = renderHook(() =>\n      useAutoPlay({\n        autoPlay: true,\n        autoPlayInterval: 1000,\n        carouselController: mockCarouselController,\n      })\n    );\n\n    // Run the timer once to ensure it's set\n    act(() => {\n      jest.runOnlyPendingTimers();\n    });\n\n    // Clear previous call records\n    mockCarouselController.next.mockClear();\n\n    // Then unmount the component and run the timer again\n    act(() => {\n      unmount();\n      jest.runOnlyPendingTimers();\n    });\n\n    expect(mockCarouselController.next).not.toHaveBeenCalled();\n  });\n\n  it(\"should pause and resume autoplay\", () => {\n    const { result } = renderHook(() =>\n      useAutoPlay({\n        autoPlay: true,\n        autoPlayInterval: 1000,\n        carouselController: mockCarouselController,\n      })\n    );\n\n    // Run the timer once to ensure it's set\n    act(() => {\n      jest.runOnlyPendingTimers();\n    });\n\n    // Clear previous call records\n    mockCarouselController.next.mockClear();\n\n    // Pause autoplay\n    act(() => {\n      result.current.pause();\n      jest.runOnlyPendingTimers();\n    });\n\n    expect(mockCarouselController.next).not.toHaveBeenCalled();\n\n    // Resume autoplay\n    act(() => {\n      result.current.start();\n      jest.runOnlyPendingTimers();\n    });\n\n    expect(mockCarouselController.next).toHaveBeenCalledTimes(1);\n  });\n\n  it(\"should respect autoPlayInterval timing\", () => {\n    renderHook(() =>\n      useAutoPlay({\n        autoPlay: true,\n        autoPlayInterval: 2000,\n        carouselController: mockCarouselController,\n      })\n    );\n\n    // Advance less than interval\n    act(() => {\n      jest.advanceTimersByTime(1500);\n    });\n    expect(mockCarouselController.next).not.toHaveBeenCalled();\n\n    // Advance to complete interval\n    act(() => {\n      jest.advanceTimersByTime(500);\n    });\n    expect(mockCarouselController.next).toHaveBeenCalledTimes(1);\n  });\n\n  it(\"should chain autoplay calls correctly\", () => {\n    renderHook(() =>\n      useAutoPlay({\n        autoPlay: true,\n        autoPlayInterval: 1000,\n        carouselController: mockCarouselController,\n      })\n    );\n\n    // First interval\n    act(() => {\n      jest.runOnlyPendingTimers();\n    });\n    expect(mockCarouselController.next).toHaveBeenCalledTimes(1);\n\n    // Trigger onFinished callback to start the next timer\n    const onFinished = mockCarouselController.next.mock.calls[0][0].onFinished;\n    act(() => {\n      onFinished();\n      jest.runOnlyPendingTimers();\n    });\n    expect(mockCarouselController.next).toHaveBeenCalledTimes(2);\n\n    // Trigger onFinished callback to start the next timer\n    const onFinished2 = mockCarouselController.next.mock.calls[1][0].onFinished;\n    act(() => {\n      onFinished2();\n      jest.runOnlyPendingTimers();\n    });\n    expect(mockCarouselController.next).toHaveBeenCalledTimes(3);\n  });\n});\n"]}