{"version":3,"sources":["useOnProgressChange.test.tsx"],"names":["jest","mock","reactionCallback","useSharedValue","fn","initialValue","value","useAnimatedReaction","deps","cb","depsResult","runOnJS","Easing","bezier","factory","__triggerReaction","computedOffsetXValueWithAutoFillData","describe","mockOffsetX","mockOnProgressChange","requireMock","beforeEach","clearAllMocks","it","size","autoFillData","loop","offsetX","rawDataLength","onProgressChange","expect","toHaveBeenCalledWith","progressValue","toBe","not","toHaveBeenCalled"],"mappings":"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","sourcesContent":["import { useSharedValue } from \"react-native-reanimated\";\n\nimport { renderHook } from \"@testing-library/react-hooks\";\n\nimport { useOnProgressChange } from \"./useOnProgressChange\";\n\n// Mock Reanimated and Easing\njest.mock(\"react-native-reanimated\", () => {\n  let reactionCallback: ((value: any) => void) | null = null;\n\n  return {\n    useSharedValue: jest.fn((initialValue) => ({\n      value: initialValue,\n    })),\n    useAnimatedReaction: jest.fn((deps, cb) => {\n      reactionCallback = cb;\n      const depsResult = deps();\n      cb(depsResult);\n      return () => {\n        reactionCallback = null;\n      };\n    }),\n    runOnJS: jest.fn((fn) => fn),\n    Easing: {\n      bezier: () => ({\n        factory: () => 0,\n      }),\n    },\n    // Export the helper function for testing\n    __triggerReaction: (value: any) => {\n      if (reactionCallback) reactionCallback(value);\n    },\n  };\n});\n\n// Mock computedOffsetXValueWithAutoFillData\njest.mock(\"../utils/computed-with-auto-fill-data\", () => ({\n  computedOffsetXValueWithAutoFillData: jest.fn(({ value }) => value),\n}));\n\ndescribe(\"useOnProgressChange\", () => {\n  const mockOffsetX = useSharedValue(0);\n  const mockOnProgressChange = jest.fn();\n  const { __triggerReaction } = jest.requireMock(\"react-native-reanimated\");\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockOffsetX.value = 0;\n  });\n\n  it(\"should handle progress change with function callback\", () => {\n    renderHook(() =>\n      useOnProgressChange({\n        size: 300,\n        autoFillData: false,\n        loop: false,\n        offsetX: mockOffsetX,\n        rawDataLength: 5,\n        onProgressChange: mockOnProgressChange,\n      })\n    );\n\n    mockOffsetX.value = -300; // Move to next slide\n    __triggerReaction(mockOffsetX.value);\n    expect(mockOnProgressChange).toHaveBeenCalledWith(-300, 1);\n  });\n\n  it(\"should handle progress change with shared value\", () => {\n    const progressValue = useSharedValue(0);\n    renderHook(() =>\n      useOnProgressChange({\n        size: 300,\n        autoFillData: false,\n        loop: false,\n        offsetX: mockOffsetX,\n        rawDataLength: 5,\n        onProgressChange: progressValue,\n      })\n    );\n\n    mockOffsetX.value = -300; // Move to next slide\n    __triggerReaction(mockOffsetX.value);\n    expect(progressValue.value).toBe(1);\n  });\n\n  it(\"should handle loop mode\", () => {\n    renderHook(() =>\n      useOnProgressChange({\n        size: 300,\n        autoFillData: false,\n        loop: true,\n        offsetX: mockOffsetX,\n        rawDataLength: 5,\n        onProgressChange: mockOnProgressChange,\n      })\n    );\n\n    mockOffsetX.value = -1500; // Move to last slide\n    __triggerReaction(mockOffsetX.value);\n    expect(mockOnProgressChange).toHaveBeenCalledWith(-1500, 5);\n  });\n\n  it(\"should handle autoFillData mode\", () => {\n    renderHook(() =>\n      useOnProgressChange({\n        size: 300,\n        autoFillData: true,\n        loop: false,\n        offsetX: mockOffsetX,\n        rawDataLength: 3,\n        onProgressChange: mockOnProgressChange,\n      })\n    );\n\n    mockOffsetX.value = -300; // Move to next slide\n    __triggerReaction(mockOffsetX.value);\n    expect(mockOnProgressChange).toHaveBeenCalledWith(-300, 1);\n  });\n\n  it(\"should clamp values when not in loop mode\", () => {\n    renderHook(() =>\n      useOnProgressChange({\n        size: 300,\n        autoFillData: false,\n        loop: false,\n        offsetX: mockOffsetX,\n        rawDataLength: 3,\n        onProgressChange: mockOnProgressChange,\n      })\n    );\n\n    mockOffsetX.value = 300; // Try to move before first slide\n    __triggerReaction(mockOffsetX.value);\n    expect(mockOnProgressChange).toHaveBeenCalledWith(0, 0);\n\n    mockOffsetX.value = -900; // Try to move after last slide\n    __triggerReaction(mockOffsetX.value);\n    expect(mockOnProgressChange).toHaveBeenCalledWith(-600, 2);\n  });\n\n  it(\"should handle positive offset values\", () => {\n    renderHook(() =>\n      useOnProgressChange({\n        size: 300,\n        autoFillData: false,\n        loop: true,\n        offsetX: mockOffsetX,\n        rawDataLength: 5,\n        onProgressChange: mockOnProgressChange,\n      })\n    );\n\n    mockOffsetX.value = 300; // Move backwards\n    __triggerReaction(mockOffsetX.value);\n    expect(mockOnProgressChange).toHaveBeenCalledWith(300, 4);\n  });\n\n  it(\"should not call onProgressChange if not provided\", () => {\n    renderHook(() =>\n      useOnProgressChange({\n        size: 300,\n        autoFillData: false,\n        loop: false,\n        offsetX: mockOffsetX,\n        rawDataLength: 5,\n      })\n    );\n\n    mockOffsetX.value = -300;\n    expect(mockOnProgressChange).not.toHaveBeenCalled();\n  });\n});\n"]}