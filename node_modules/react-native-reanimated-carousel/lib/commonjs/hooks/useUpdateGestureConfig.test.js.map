{"version":3,"sources":["useUpdateGestureConfig.test.ts"],"names":["describe","mockGesture","enabled","jest","fn","mockReturnThis","beforeEach","clearAllMocks","it","expect","toHaveBeenCalledWith","not","toHaveBeenCalled","props","initialProps","rerender","mockClear","newMockGesture","gesture","config","unmount"],"mappings":"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","sourcesContent":["import { renderHook } from \"@testing-library/react-hooks\";\n\nimport { useUpdateGestureConfig } from \"./useUpdateGestureConfig\";\n\ndescribe(\"useUpdateGestureConfig\", () => {\n  const mockGesture = {\n    enabled: jest.fn().mockReturnThis(),\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it(\"should update gesture enabled state\", () => {\n    renderHook(() =>\n      useUpdateGestureConfig(mockGesture as any, {\n        enabled: true,\n      })\n    );\n\n    expect(mockGesture.enabled).toHaveBeenCalledWith(true);\n  });\n\n  it(\"should handle undefined enabled state\", () => {\n    renderHook(() => useUpdateGestureConfig(mockGesture as any, {}));\n\n    expect(mockGesture.enabled).not.toHaveBeenCalled();\n  });\n\n  it(\"should update when enabled state changes\", () => {\n    const { rerender } = renderHook((props) => useUpdateGestureConfig(mockGesture as any, props), {\n      initialProps: { enabled: true },\n    });\n\n    expect(mockGesture.enabled).toHaveBeenCalledWith(true);\n\n    rerender({ enabled: false });\n    expect(mockGesture.enabled).toHaveBeenCalledWith(false);\n  });\n\n  it(\"should not update when enabled state remains the same\", () => {\n    const { rerender } = renderHook((props) => useUpdateGestureConfig(mockGesture as any, props), {\n      initialProps: { enabled: true },\n    });\n\n    mockGesture.enabled.mockClear();\n\n    rerender({ enabled: true });\n    expect(mockGesture.enabled).not.toHaveBeenCalled();\n  });\n\n  it(\"should handle gesture object changes\", () => {\n    const newMockGesture = {\n      enabled: jest.fn().mockReturnThis(),\n    };\n\n    const { rerender } = renderHook(\n      ({ gesture, config }) => useUpdateGestureConfig(gesture as any, config),\n      {\n        initialProps: {\n          gesture: mockGesture,\n          config: { enabled: true },\n        },\n      }\n    );\n\n    expect(mockGesture.enabled).toHaveBeenCalledWith(true);\n\n    rerender({\n      gesture: newMockGesture,\n      config: { enabled: true },\n    });\n\n    expect(newMockGesture.enabled).toHaveBeenCalledWith(true);\n  });\n\n  it(\"should cleanup properly on unmount\", () => {\n    const { unmount } = renderHook(() =>\n      useUpdateGestureConfig(mockGesture as any, {\n        enabled: true,\n      })\n    );\n\n    mockGesture.enabled.mockClear();\n    unmount();\n\n    expect(mockGesture.enabled).not.toHaveBeenCalled();\n  });\n});\n"]}