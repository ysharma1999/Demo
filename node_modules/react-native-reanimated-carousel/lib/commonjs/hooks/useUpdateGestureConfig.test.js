var _reactHooks=require("@testing-library/react-hooks");var _useUpdateGestureConfig=require("./useUpdateGestureConfig");describe("useUpdateGestureConfig",function(){var mockGesture={enabled:jest.fn().mockReturnThis()};beforeEach(function(){jest.clearAllMocks();});it("should update gesture enabled state",function(){(0,_reactHooks.renderHook)(function(){return(0,_useUpdateGestureConfig.useUpdateGestureConfig)(mockGesture,{enabled:true});});expect(mockGesture.enabled).toHaveBeenCalledWith(true);});it("should handle undefined enabled state",function(){(0,_reactHooks.renderHook)(function(){return(0,_useUpdateGestureConfig.useUpdateGestureConfig)(mockGesture,{});});expect(mockGesture.enabled).not.toHaveBeenCalled();});it("should update when enabled state changes",function(){var _renderHook=(0,_reactHooks.renderHook)(function(props){return(0,_useUpdateGestureConfig.useUpdateGestureConfig)(mockGesture,props);},{initialProps:{enabled:true}}),rerender=_renderHook.rerender;expect(mockGesture.enabled).toHaveBeenCalledWith(true);rerender({enabled:false});expect(mockGesture.enabled).toHaveBeenCalledWith(false);});it("should not update when enabled state remains the same",function(){var _renderHook2=(0,_reactHooks.renderHook)(function(props){return(0,_useUpdateGestureConfig.useUpdateGestureConfig)(mockGesture,props);},{initialProps:{enabled:true}}),rerender=_renderHook2.rerender;mockGesture.enabled.mockClear();rerender({enabled:true});expect(mockGesture.enabled).not.toHaveBeenCalled();});it("should handle gesture object changes",function(){var newMockGesture={enabled:jest.fn().mockReturnThis()};var _renderHook3=(0,_reactHooks.renderHook)(function(_ref){var gesture=_ref.gesture,config=_ref.config;return(0,_useUpdateGestureConfig.useUpdateGestureConfig)(gesture,config);},{initialProps:{gesture:mockGesture,config:{enabled:true}}}),rerender=_renderHook3.rerender;expect(mockGesture.enabled).toHaveBeenCalledWith(true);rerender({gesture:newMockGesture,config:{enabled:true}});expect(newMockGesture.enabled).toHaveBeenCalledWith(true);});it("should cleanup properly on unmount",function(){var _renderHook4=(0,_reactHooks.renderHook)(function(){return(0,_useUpdateGestureConfig.useUpdateGestureConfig)(mockGesture,{enabled:true});}),unmount=_renderHook4.unmount;mockGesture.enabled.mockClear();unmount();expect(mockGesture.enabled).not.toHaveBeenCalled();});});
//# sourceMappingURL=useUpdateGestureConfig.test.js.map