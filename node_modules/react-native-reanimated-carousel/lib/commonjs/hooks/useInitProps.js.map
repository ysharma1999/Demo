{"version":3,"sources":["useInitProps.ts"],"names":["useInitProps","props","defaultIndex","data","rawData","loop","autoPlayInterval","_autoPlayInterval","scrollAnimationDuration","style","autoFillData","enabled","pagingEnabled","overscrollEnabled","snapEnabled","enableSnap","_width","width","_height","height","Math","round","max","React","useMemo","dataLength","length","rawDataLength","mode","modeConfig","showLength"],"mappings":"8KAAA,oDAGA,+EAoBO,QAASA,CAAAA,YAAT,CAAyBC,KAAzB,CAAgF,uBACrF,wBAeIA,KAfJ,CACEC,YADF,CACEA,YADF,8BACiB,CADjB,iCAeID,KAfJ,CAEEE,IAFF,CAEQC,OAFR,sBAEkB,EAFlB,yBAeIH,KAfJ,CAGEI,IAHF,CAGEA,IAHF,sBAGS,IAHT,mCAeIJ,KAfJ,CAIEK,gBAJF,CAIoBC,iBAJpB,gCAIwC,IAJxC,6CAeIN,KAfJ,CAKEO,uBALF,CAKEA,uBALF,gCAK4B,GAL5B,oCAeIP,KAfJ,CAMEQ,KANF,CAMEA,KANF,uBAMU,EANV,kCAeIR,KAfJ,CAOES,YAPF,CAOEA,YAPF,8BAOiB,IAPjB,oCAeIT,KAfJ,CASEU,OATF,CASEA,OATF,yBASY,IATZ,qCAeIV,KAfJ,CAUEW,aAVF,CAUEA,aAVF,+BAUkB,IAVlB,4CAeIX,KAfJ,CAWEY,iBAXF,CAWEA,iBAXF,gCAWsB,IAXtB,0CAeIZ,KAfJ,CAYEa,WAZF,CAYEA,WAZF,gDAYgBb,KAAK,CAACc,UAZtB,0BAYoC,IAZpC,oBAaSC,MAbT,CAeIf,KAfJ,CAaEgB,KAbF,CAcUC,OAdV,CAeIjB,KAfJ,CAcEkB,MAdF,CAiBA,GAAMF,CAAAA,KAAK,CAAGG,IAAI,CAACC,KAAL,CAAWL,MAAM,EAAI,CAArB,CAAd,CACA,GAAMG,CAAAA,MAAM,CAAGC,IAAI,CAACC,KAAL,CAAWH,OAAO,EAAI,CAAtB,CAAf,CACA,GAAMZ,CAAAA,gBAAgB,CAAGc,IAAI,CAACE,GAAL,CAASf,iBAAT,CAA4B,CAA5B,CAAzB,CAEA,GAAMJ,CAAAA,IAAI,CAAGoB,eAAMC,OAAN,CAAmB,UAAM,CACpC,MAAO,+DAAoC,CACzCnB,IAAI,CAAJA,IADyC,CAEzCK,YAAY,CAAZA,YAFyC,CAGzCP,IAAI,CAAEC,OAHmC,CAIzCqB,UAAU,CAAErB,OAAO,CAACsB,MAJqB,CAApC,CAAP,CAMD,CAPY,CAOV,CAACtB,OAAD,CAAUC,IAAV,CAAgBK,YAAhB,CAPU,CAAb,CASA,GAAMe,CAAAA,UAAU,CAAGtB,IAAI,CAACuB,MAAxB,CACA,GAAMC,CAAAA,aAAa,CAAGvB,OAAO,CAACsB,MAA9B,CAEA,GAAIzB,KAAK,CAAC2B,IAAN,GAAe,gBAAf,EAAmC3B,KAAK,CAAC2B,IAAN,GAAe,kBAAtD,CAA0E,6CACxE,GAAI,CAAC3B,KAAK,CAAC4B,UAAX,CAAuB5B,KAAK,CAAC4B,UAAN,CAAmB,EAAnB,CAEvB5B,KAAK,CAAC4B,UAAN,CAAiBC,UAAjB,2CAA8B7B,KAAK,CAAC4B,UAApC,eAA8B,kBAAkBC,UAAhD,8BAA8DL,UAAU,CAAG,CAA3E,CACD,CAED,wBACKxB,KADL,EAEEC,YAAY,CAAZA,YAFF,CAGEQ,YAAY,CAAZA,YAHF,CAKEP,IAAI,CAAJA,IALF,CAOEsB,UAAU,CAAVA,UAPF,CASErB,OAAO,CAAPA,OATF,CAWEuB,aAAa,CAAbA,aAXF,CAYEtB,IAAI,CAAJA,IAZF,CAaEM,OAAO,CAAPA,OAbF,CAcEL,gBAAgB,CAAhBA,gBAdF,CAeEE,uBAAuB,CAAvBA,uBAfF,CAgBEC,KAAK,CAALA,KAhBF,CAiBEG,aAAa,CAAbA,aAjBF,CAkBEE,WAAW,CAAXA,WAlBF,CAmBED,iBAAiB,CAAjBA,iBAnBF,CAoBEI,KAAK,CAALA,KApBF,CAqBEE,MAAM,CAANA,MArBF,GAuBD","sourcesContent":["import React from \"react\";\n\nimport type { TCarouselProps } from \"../types\";\nimport { computedFillDataWithAutoFillData } from \"../utils/computed-with-auto-fill-data\";\n\ntype TGetRequiredProps<P extends keyof TCarouselProps> = Record<P, Required<TCarouselProps>[P]>;\n\nexport type TInitializeCarouselProps<T> = TCarouselProps<T> &\n  TGetRequiredProps<\n    | \"defaultIndex\"\n    | \"loop\"\n    | \"width\"\n    | \"height\"\n    | \"scrollAnimationDuration\"\n    | \"autoPlayInterval\"\n    | \"autoFillData\"\n  > & {\n    // Raw data that has not been processed\n    rawData: T[];\n    dataLength: number;\n    rawDataLength: number;\n  };\n\nexport function useInitProps<T>(props: TCarouselProps<T>): TInitializeCarouselProps<T> {\n  const {\n    defaultIndex = 0,\n    data: rawData = [],\n    loop = true,\n    autoPlayInterval: _autoPlayInterval = 1000,\n    scrollAnimationDuration = 500,\n    style = {},\n    autoFillData = true,\n    // switchers\n    enabled = true,\n    pagingEnabled = true,\n    overscrollEnabled = true,\n    snapEnabled = props.enableSnap ?? true,\n    width: _width,\n    height: _height,\n  } = props;\n\n  const width = Math.round(_width || 0);\n  const height = Math.round(_height || 0);\n  const autoPlayInterval = Math.max(_autoPlayInterval, 0);\n\n  const data = React.useMemo<T[]>(() => {\n    return computedFillDataWithAutoFillData<T>({\n      loop,\n      autoFillData,\n      data: rawData,\n      dataLength: rawData.length,\n    });\n  }, [rawData, loop, autoFillData]);\n\n  const dataLength = data.length;\n  const rawDataLength = rawData.length;\n\n  if (props.mode === \"vertical-stack\" || props.mode === \"horizontal-stack\") {\n    if (!props.modeConfig) props.modeConfig = {};\n\n    props.modeConfig.showLength = props.modeConfig?.showLength ?? dataLength - 1;\n  }\n\n  return {\n    ...props,\n    defaultIndex,\n    autoFillData,\n    // Fill data with autoFillData\n    data,\n    // Length of fill data\n    dataLength,\n    // Raw data that has not been processed\n    rawData,\n    // Length of raw data\n    rawDataLength,\n    loop,\n    enabled,\n    autoPlayInterval,\n    scrollAnimationDuration,\n    style,\n    pagingEnabled,\n    snapEnabled,\n    overscrollEnabled,\n    width,\n    height,\n  };\n}\n"]}