{"version":3,"sources":["useOnProgressChange.ts"],"names":["useOnProgressChange","opts","autoFillData","loop","offsetX","size","rawDataLength","onProgressChange","isFunc","value","_value","Math","max","min","absoluteProgress","abs","computedOffsetXValueWithAutoFillData","runOnJS"],"mappings":"yGACA,8DAGA,+E,ulEAEO,QAASA,CAAAA,mBAAT,CACLC,IADK,CAQL,CACA,GAAQC,CAAAA,YAAR,CAA+ED,IAA/E,CAAQC,YAAR,CAAsBC,IAAtB,CAA+EF,IAA/E,CAAsBE,IAAtB,CAA4BC,OAA5B,CAA+EH,IAA/E,CAA4BG,OAA5B,CAAqCC,IAArC,CAA+EJ,IAA/E,CAAqCI,IAArC,CAA2CC,aAA3C,CAA+EL,IAA/E,CAA2CK,aAA3C,CAA0DC,gBAA1D,CAA+EN,IAA/E,CAA0DM,gBAA1D,CAMA,GAAMC,CAAAA,MAAM,CAAG,MAAOD,CAAAA,gBAAP,GAA4B,UAA3C,CAEA,+CACE,uFAAMH,CAAAA,OAAO,CAACK,KAAd,gCAAML,OAAN,8IADF,GAEE,+EAACM,MAAD,CAAY,CACV,GAAID,CAAAA,KAAK,CAAG,mEAAqC,CAC/CA,KAAK,CAAEC,MADwC,CAE/CJ,aAAa,CAAbA,aAF+C,CAG/CD,IAAI,CAAJA,IAH+C,CAI/CH,YAAY,CAAZA,YAJ+C,CAK/CC,IAAI,CAAJA,IAL+C,CAArC,CAAZ,CAQA,GAAI,CAACA,IAAL,CAAW,CACTM,KAAK,CAAGE,IAAI,CAACC,GAAL,CAAS,EAAE,CAACN,aAAa,CAAG,CAAjB,EAAsBD,IAAxB,CAAT,CAAwCM,IAAI,CAACE,GAAL,CAASJ,KAAT,CAAgB,CAAhB,CAAxC,CAAR,CACD,CAED,GAAIK,CAAAA,gBAAgB,CAAGH,IAAI,CAACI,GAAL,CAASN,KAAK,CAAGJ,IAAjB,CAAvB,CAEA,GAAII,KAAK,CAAG,CAAZ,CAAeK,gBAAgB,CAAGR,aAAa,CAAGQ,gBAAnC,CAEf,GAAIP,gBAAJ,CAAsB,CACpB,GAAIC,MAAJ,CAAY,mCAAQD,gBAAR,EAA0BE,KAA1B,CAAiCK,gBAAjC,EAAZ,IACKP,CAAAA,gBAAgB,CAACE,KAAjB,CAAyBK,gBAAzB,CACN,CACF,CArBD,2DACcE,8DADd,eAGIV,aAHJ,MAIID,IAJJ,cAKIH,YALJ,MAMIC,IANJ,kBAiBMI,gBAjBN,QAkBQC,MAlBR,SAkBgBS,8BAlBhB,4IAFF,GAwBE,CAACd,IAAD,CAAOD,YAAP,CAAqBI,aAArB,CAAoCC,gBAApC,CAAsDF,IAAtD,CAxBF,EA0BD","sourcesContent":["import type Animated from \"react-native-reanimated\";\nimport { runOnJS, useAnimatedReaction } from \"react-native-reanimated\";\n\nimport type { TCarouselProps } from \"../types\";\nimport { computedOffsetXValueWithAutoFillData } from \"../utils/computed-with-auto-fill-data\";\n\nexport function useOnProgressChange(\n  opts: {\n    size: number;\n    autoFillData: boolean;\n    loop: boolean;\n    offsetX: Animated.SharedValue<number>;\n    rawDataLength: number;\n  } & Pick<TCarouselProps, \"onProgressChange\">\n) {\n  const { autoFillData, loop, offsetX, size, rawDataLength, onProgressChange } = opts;\n\n  // remember `isFunc` here because we can't accurately check typeof\n  // from within useAnimatedReaction because its code has been workletized;\n  // the `onProgressChange` value will be typeof \"object\" from within\n  // the worklet code even if it's a function.\n  const isFunc = typeof onProgressChange === \"function\";\n\n  useAnimatedReaction(\n    () => offsetX.value,\n    (_value) => {\n      let value = computedOffsetXValueWithAutoFillData({\n        value: _value,\n        rawDataLength,\n        size,\n        autoFillData,\n        loop,\n      });\n\n      if (!loop) {\n        value = Math.max(-((rawDataLength - 1) * size), Math.min(value, 0));\n      }\n\n      let absoluteProgress = Math.abs(value / size);\n\n      if (value > 0) absoluteProgress = rawDataLength - absoluteProgress;\n\n      if (onProgressChange) {\n        if (isFunc) runOnJS(onProgressChange)(value, absoluteProgress);\n        else onProgressChange.value = absoluteProgress;\n      }\n    },\n    [loop, autoFillData, rawDataLength, onProgressChange, size]\n  );\n}\n"]}