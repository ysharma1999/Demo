{"version":3,"sources":["ItemLayout.tsx"],"names":["ItemLayout","props","handlerOffset","index","children","visibleRanges","animationStyle","loop","dataLength","width","height","vertical","customConfig","mode","modeConfig","size","offsetXConfig","snapDirection","showLength","type","viewCount","x","animationValue","value","animatedStyle","position","pointerEvents"],"mappings":"sKAAA,oDAGA,uFAIA,+CAGA,+B,i1EAIO,GAAMA,CAAAA,UAQX,CAAG,QARQA,CAAAA,UAQR,CAACC,KAAD,CAAW,CACd,GAAQC,CAAAA,aAAR,CAA0ED,KAA1E,CAAQC,aAAR,CAAuBC,KAAvB,CAA0EF,KAA1E,CAAuBE,KAAvB,CAA8BC,QAA9B,CAA0EH,KAA1E,CAA8BG,QAA9B,CAAwCC,aAAxC,CAA0EJ,KAA1E,CAAwCI,aAAxC,CAAuDC,cAAvD,CAA0EL,KAA1E,CAAuDK,cAAvD,CAEA,oBAII,2BAJJ,uCACEL,KADF,CACWM,IADX,uBACWA,IADX,CACiBC,UADjB,uBACiBA,UADjB,CAC6BC,KAD7B,uBAC6BA,KAD7B,CACoCC,MADpC,uBACoCA,MADpC,CAC4CC,QAD5C,uBAC4CA,QAD5C,CACsDC,YADtD,uBACsDA,YADtD,CACoEC,IADpE,uBACoEA,IADpE,CAC0EC,UAD1E,uBAC0EA,UAD1E,CAMA,GAAMC,CAAAA,IAAI,CAAGJ,QAAQ,CAAGD,MAAH,CAAYD,KAAjC,CAEA,GAAIO,CAAAA,aAAoB,gBACtBd,aAAa,CAAbA,aADsB,CAEtBC,KAAK,CAALA,KAFsB,CAGtBY,IAAI,CAAJA,IAHsB,CAItBP,UAAU,CAAVA,UAJsB,CAKtBD,IAAI,CAAJA,IALsB,EAMlB,MAAOK,CAAAA,YAAP,GAAwB,UAAxB,CAAqCA,YAAY,EAAjD,CAAsD,EANpC,CAAxB,CASA,GAAIC,IAAI,GAAK,kBAAb,CAAiC,CAC/B,SAAsCC,UAAtC,CAAQG,aAAR,MAAQA,aAAR,CAAuBC,UAAvB,MAAuBA,UAAvB,CAEAF,aAAa,CAAG,CACdd,aAAa,CAAbA,aADc,CAEdC,KAAK,CAALA,KAFc,CAGdY,IAAI,CAAJA,IAHc,CAIdP,UAAU,CAAVA,UAJc,CAKdD,IAAI,CAAJA,IALc,CAMdY,IAAI,CAAEF,aAAa,GAAK,OAAlB,CAA4B,UAA5B,CAAyC,UANjC,CAOdG,SAAS,CAAEF,UAPG,CAAhB,CASD,CAED,GAAMG,CAAAA,CAAC,CAAG,2BAAWL,aAAX,CAA0BX,aAA1B,CAAV,CACA,GAAMiB,CAAAA,cAAc,CAAG,2CAAgB,uFAAMD,CAAAA,CAAC,CAACE,KAAF,CAAUR,IAAhB,0BAAMM,CAAN,MAAgBN,IAAhB,8IAAhB,GAAsC,CAACM,CAAD,CAAIN,IAAJ,CAAtC,CAAvB,CACA,GAAMS,CAAAA,aAAa,CAAG,4CACpB,uFAAMlB,CAAAA,cAAc,CAACe,CAAC,CAACE,KAAF,CAAUR,IAAX,CAAiBZ,KAAjB,CAApB,uCAAMG,cAAN,GAAqBe,CAArB,MAA+BN,IAA/B,OAAqCZ,KAArC,4IADoB,GAEpB,CAACG,cAAD,CAAiBH,KAAjB,CAAwBkB,CAAxB,CAA2BN,IAA3B,CAFoB,CAAtB,CAWA,MACE,oBAAC,8BAAD,CAAU,IAAV,EACE,KAAK,CAAE,CACL,CACEN,KAAK,CAAEA,KAAK,EAAI,MADlB,CAEEC,MAAM,CAAEA,MAAM,EAAI,MAFpB,CAGEe,QAAQ,CAAE,UAHZ,CAIEC,aAAa,CAAE,UAJjB,CADK,CAOLF,aAPK,CADT,CAgBE,MAAM,CAAG,mBAAkBrB,KAAM,IAhBnC,UAkBGC,QAAQ,CAAC,CAAEkB,cAAc,CAAdA,cAAF,CAAD,CAlBX,EADF,CAsBD,CA7EM,C","sourcesContent":["import React from \"react\";\nimport type { ViewStyle } from \"react-native\";\nimport type { SharedValue } from \"react-native-reanimated\";\nimport Animated, { useAnimatedStyle, useDerivedValue } from \"react-native-reanimated\";\n\nimport { TCarouselProps } from \"src/types\";\nimport type { IOpts } from \"../hooks/useOffsetX\";\nimport { useOffsetX } from \"../hooks/useOffsetX\";\nimport type { IVisibleRanges } from \"../hooks/useVisibleRanges\";\nimport type { ILayoutConfig } from \"../layouts/stack\";\nimport { useGlobalState } from \"../store\";\n\nexport type TAnimationStyle = NonNullable<TCarouselProps[\"customAnimation\"]>;\n\nexport const ItemLayout: React.FC<{\n  index: number;\n  handlerOffset: SharedValue<number>;\n  visibleRanges: IVisibleRanges;\n  animationStyle: TAnimationStyle;\n  children: (ctx: {\n    animationValue: Animated.SharedValue<number>;\n  }) => React.ReactElement;\n}> = (props) => {\n  const { handlerOffset, index, children, visibleRanges, animationStyle } = props;\n\n  const {\n    props: { loop, dataLength, width, height, vertical, customConfig, mode, modeConfig },\n    // TODO: For dynamic dimension in the future\n    // layout: { updateItemDimensions },\n  } = useGlobalState();\n\n  const size = vertical ? height : width;\n\n  let offsetXConfig: IOpts = {\n    handlerOffset,\n    index,\n    size,\n    dataLength,\n    loop,\n    ...(typeof customConfig === \"function\" ? customConfig() : {}),\n  };\n\n  if (mode === \"horizontal-stack\") {\n    const { snapDirection, showLength } = modeConfig as ILayoutConfig;\n\n    offsetXConfig = {\n      handlerOffset,\n      index,\n      size,\n      dataLength,\n      loop,\n      type: snapDirection === \"right\" ? \"negative\" : \"positive\",\n      viewCount: showLength,\n    };\n  }\n\n  const x = useOffsetX(offsetXConfig, visibleRanges);\n  const animationValue = useDerivedValue(() => x.value / size, [x, size]);\n  const animatedStyle = useAnimatedStyle<ViewStyle>(\n    () => animationStyle(x.value / size, index),\n    [animationStyle, index, x, size]\n  );\n\n  // TODO: For dynamic dimension in the future\n  // function handleLayout(e: LayoutChangeEvent) {\n  //   const { width, height } = e.nativeEvent.layout;\n  //   updateItemDimensions(index, { width, height });\n  // }\n\n  return (\n    <Animated.View\n      style={[\n        {\n          width: width || \"100%\",\n          height: height || \"100%\",\n          position: \"absolute\",\n          pointerEvents: \"box-none\",\n        },\n        animatedStyle,\n      ]}\n      // onLayout={handleLayout}\n      /**\n       * We use this testID to know when the carousel item is ready to be tested in test.\n       * e.g.\n       *  The testID of first item will be changed to __CAROUSEL_ITEM_0_READY__ from __CAROUSEL_ITEM_0_NOT_READY__ when the item is ready.\n       * */\n      testID={`__CAROUSEL_ITEM_${index}__`}\n    >\n      {children({ animationValue })}\n    </Animated.View>\n  );\n};\n"]}