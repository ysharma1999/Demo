{"version":3,"sources":["rnr-demo.test.tsx"],"names":["describe","it","initialValue","updatedValue","TestComponent","props","opacity","value","animatedStyle","wrapper","renderer","create","expect","root","children","style","jestAnimatedStyle","current","toBe","update"],"mappings":"mFACA,oDACA,uFACA,8E,yvEAEAA,QAAQ,CAAC,gBAAD,CAAmB,UAAM,CAC/BC,EAAE,CAAC,2BAAD,CAA8B,UAAM,CACpC,GAAMC,CAAAA,YAAY,CAAG,CAArB,CACA,GAAMC,CAAAA,YAAY,CAAG,CAArB,CAOA,GAAMC,CAAAA,aAAwB,CAAG,QAA3BA,CAAAA,aAA2B,CAACC,KAAD,CAAW,CAC1C,GAAMC,CAAAA,OAAO,CAAG,2CAAgB,uFAAMD,CAAAA,KAAK,CAACE,KAAZ,8BAAMF,KAAN,8IAAhB,GAAmC,CAACA,KAAK,CAACE,KAAP,CAAnC,CAAhB,CACA,GAAMC,CAAAA,aAAa,CAAG,4CACpB,uFAAO,CACLF,OAAO,CAAEA,OAAO,CAACC,KADZ,CAAP,gCACWD,OADX,4IADoB,GAIpB,CAACA,OAAD,CAJoB,CAAtB,CAOA,MAAO,oBAAC,8BAAD,CAAU,IAAV,EAAe,KAAK,CAAEE,aAAtB,EAAP,CACD,CAVD,CAaA,GAAMC,CAAAA,OAAO,CAAGC,2BAASC,MAAT,CAAgB,oBAAC,aAAD,EAAyB,KAAK,CAAET,YAAhC,EAAmB,KAAnB,CAAhB,CAAhB,CAEAU,MAAM,CACJ,MAAOH,CAAAA,OAAO,CAACI,IAAR,CAAaC,QAAb,CAAsB,CAAtB,CAAP,GAAoC,QAApC,CACIL,OAAO,CAACI,IAAR,CAAaC,QAAb,CAAsB,CAAtB,EAAyBT,KAAzB,CAA+BU,KAA/B,CAAqCC,iBAArC,CAAuDC,OAAvD,CAA+DV,KAA/D,CAAqED,OADzE,CAEI,KAHA,CAAN,CAIEY,IAJF,CAIOhB,YAJP,EAOAO,OAAO,CAACU,MAAR,CAAe,oBAAC,aAAD,EAAyB,KAAK,CAAEhB,YAAhC,EAAmB,KAAnB,CAAf,EAEAS,MAAM,CACJ,MAAOH,CAAAA,OAAO,CAACI,IAAR,CAAaC,QAAb,CAAsB,CAAtB,CAAP,GAAoC,QAApC,CACIL,OAAO,CAACI,IAAR,CAAaC,QAAb,CAAsB,CAAtB,EAAyBT,KAAzB,CAA+BU,KAA/B,CAAqCC,iBAArC,CAAuDC,OAAvD,CAA+DV,KAA/D,CAAqED,OADzE,CAEI,KAHA,CAAN,CAIEY,IAJF,CAIOhB,YAJP,EAKD,CAtCC,CAAF,CAuCD,CAxCO,CAAR","sourcesContent":["import type { FC } from \"react\";\nimport React from \"react\";\nimport Animated, { useAnimatedStyle, useDerivedValue } from \"react-native-reanimated\";\nimport renderer from \"react-test-renderer\";\n\ndescribe(\"useSharedValue\", () => {\n  it(\"retains value on rerender\", () => {\n    const initialValue = 0;\n    const updatedValue = 1;\n\n    interface Props {\n      key: string;\n      value: number;\n    }\n\n    const TestComponent: FC<Props> = (props) => {\n      const opacity = useDerivedValue(() => props.value, [props.value]);\n      const animatedStyle = useAnimatedStyle(\n        () => ({\n          opacity: opacity.value,\n        }),\n        [opacity]\n      );\n\n      return <Animated.View style={animatedStyle} />;\n    };\n\n    // When rendering with initial value\n    const wrapper = renderer.create(<TestComponent key=\"box\" value={initialValue} />);\n\n    expect(\n      typeof wrapper.root.children[0] !== \"string\"\n        ? wrapper.root.children[0].props.style.jestAnimatedStyle.current.value.opacity\n        : false\n    ).toBe(initialValue);\n\n    // When rendering with updated value\n    wrapper.update(<TestComponent key=\"box\" value={updatedValue} />);\n\n    expect(\n      typeof wrapper.root.children[0] !== \"string\"\n        ? wrapper.root.children[0].props.style.jestAnimatedStyle.current.value.opacity\n        : false\n    ).toBe(initialValue);\n  });\n});\n"]}