{"version":3,"sources":["ItemRenderer.tsx"],"names":["ItemRenderer","props","data","size","windowSize","handlerOffset","offsetX","dataLength","rawDataLength","loop","autoFillData","layoutConfig","renderItem","customAnimation","visibleRanges","total","viewSize","translation","React","useState","displayedItems","setDisplayedItems","value","ranges","runOnJS","map","item","index","realIndex","negativeRange","positiveRange","shouldRender","animationValue"],"mappings":"oQAAA,oDAIA,8DAGA,wCAGA,2DAEA,+E,u0CAiBO,GAAMA,CAAAA,YAAuB,CAAG,QAA1BA,CAAAA,YAA0B,CAACC,KAAD,CAAW,CAChD,GACEC,CAAAA,IADF,CAaID,KAbJ,CACEC,IADF,CAEEC,IAFF,CAaIF,KAbJ,CAEEE,IAFF,CAGEC,UAHF,CAaIH,KAbJ,CAGEG,UAHF,CAIEC,aAJF,CAaIJ,KAbJ,CAIEI,aAJF,CAKEC,OALF,CAaIL,KAbJ,CAKEK,OALF,CAMEC,UANF,CAaIN,KAbJ,CAMEM,UANF,CAOEC,aAPF,CAaIP,KAbJ,CAOEO,aAPF,CAQEC,IARF,CAaIR,KAbJ,CAQEQ,IARF,CASEC,YATF,CAaIT,KAbJ,CASES,YATF,CAUEC,YAVF,CAaIV,KAbJ,CAUEU,YAVF,CAWEC,UAXF,CAaIX,KAbJ,CAWEW,UAXF,CAYEC,eAZF,CAaIZ,KAbJ,CAYEY,eAZF,CAeA,GAAMC,CAAAA,aAAa,CAAG,uCAAiB,CACrCC,KAAK,CAAER,UAD8B,CAErCS,QAAQ,CAAEb,IAF2B,CAGrCc,WAAW,CAAEZ,aAHwB,CAIrCD,UAAU,CAAVA,UAJqC,CAKrCK,IAAI,CAAJA,IALqC,CAAjB,CAAtB,CAQA,oBAA4CS,eAAMC,QAAN,CAA8B,IAA9B,CAA5C,iEAAOC,cAAP,qBAAuBC,iBAAvB,qBAEA,+CACE,uFAAMP,CAAAA,aAAa,CAACQ,KAApB,sCAAMR,aAAN,4IADF,GAEE,+EAACS,MAAD,QAAY,mCAAQF,iBAAR,EAA2BE,MAA3B,CAAZ,gCAAYC,8BAAZ,mBAAoBH,iBAApB,4IAFF,GAGE,CAACP,aAAD,CAHF,EAMA,GAAI,CAACM,cAAL,CAAqB,MAAO,KAAP,CAErB,MACE,mDACGlB,IAAI,CAACuB,GAAL,CAAS,SAACC,IAAD,CAAOC,KAAP,CAAiB,CACzB,GAAMC,CAAAA,SAAS,CAAG,gEAAkC,CAClDD,KAAK,CAALA,KADkD,CAElDpB,UAAU,CAAEC,aAFsC,CAGlDC,IAAI,CAAJA,IAHkD,CAIlDC,YAAY,CAAZA,YAJkD,CAAlC,CAAlB,CAOA,GAAQmB,CAAAA,aAAR,CAAyCT,cAAzC,CAAQS,aAAR,CAAuBC,aAAvB,CAAyCV,cAAzC,CAAuBU,aAAvB,CAEA,GAAMC,CAAAA,YAAY,CACfJ,KAAK,EAAIE,aAAa,CAAC,CAAD,CAAtB,EAA6BF,KAAK,EAAIE,aAAa,CAAC,CAAD,CAApD,EACCF,KAAK,EAAIG,aAAa,CAAC,CAAD,CAAtB,EAA6BH,KAAK,EAAIG,aAAa,CAAC,CAAD,CAFtD,CAIA,GAAI,CAACC,YAAL,CAAmB,MAAO,KAAP,CAEnB,MACE,oBAAC,sBAAD,EAEE,KAAK,CAAEJ,KAFT,CAGE,aAAa,CAAErB,OAHjB,CAIE,aAAa,CAAEQ,aAJjB,CAKE,cAAc,CAAED,eAAe,EAAIF,YALrC,UAOG,2BAAGqB,CAAAA,cAAH,MAAGA,cAAH,OACCpB,CAAAA,UAAU,CAAC,CACTc,IAAI,CAAJA,IADS,CAETC,KAAK,CAAEC,SAFE,CAGTI,cAAc,CAAdA,cAHS,CAAD,CADX,EAPH,EACOL,KADP,CADF,CAiBD,CAjCA,CADH,EADF,CAsCD,CAxEM,C","sourcesContent":["import React from \"react\";\nimport type { FC } from \"react\";\nimport type { ViewStyle } from \"react-native\";\nimport type { SharedValue } from \"react-native-reanimated\";\nimport { runOnJS, useAnimatedReaction } from \"react-native-reanimated\";\n\nimport type { TAnimationStyle } from \"./ItemLayout\";\nimport { ItemLayout } from \"./ItemLayout\";\n\nimport type { VisibleRanges } from \"../hooks/useVisibleRanges\";\nimport { useVisibleRanges } from \"../hooks/useVisibleRanges\";\nimport type { CarouselRenderItem } from \"../types\";\nimport { computedRealIndexWithAutoFillData } from \"../utils/computed-with-auto-fill-data\";\n\ninterface Props {\n  data: any[];\n  dataLength: number;\n  rawDataLength: number;\n  loop: boolean;\n  size: number;\n  windowSize?: number;\n  autoFillData: boolean;\n  offsetX: SharedValue<number>;\n  handlerOffset: SharedValue<number>;\n  layoutConfig: TAnimationStyle;\n  renderItem: CarouselRenderItem<any>;\n  customAnimation?: (value: number, index: number) => ViewStyle;\n}\n\nexport const ItemRenderer: FC<Props> = (props) => {\n  const {\n    data,\n    size,\n    windowSize,\n    handlerOffset,\n    offsetX,\n    dataLength,\n    rawDataLength,\n    loop,\n    autoFillData,\n    layoutConfig,\n    renderItem,\n    customAnimation,\n  } = props;\n\n  const visibleRanges = useVisibleRanges({\n    total: dataLength,\n    viewSize: size,\n    translation: handlerOffset,\n    windowSize,\n    loop,\n  });\n\n  const [displayedItems, setDisplayedItems] = React.useState<VisibleRanges>(null!);\n\n  useAnimatedReaction(\n    () => visibleRanges.value,\n    (ranges) => runOnJS(setDisplayedItems)(ranges),\n    [visibleRanges]\n  );\n\n  if (!displayedItems) return null;\n\n  return (\n    <>\n      {data.map((item, index) => {\n        const realIndex = computedRealIndexWithAutoFillData({\n          index,\n          dataLength: rawDataLength,\n          loop,\n          autoFillData,\n        });\n\n        const { negativeRange, positiveRange } = displayedItems;\n\n        const shouldRender =\n          (index >= negativeRange[0] && index <= negativeRange[1]) ||\n          (index >= positiveRange[0] && index <= positiveRange[1]);\n\n        if (!shouldRender) return null;\n\n        return (\n          <ItemLayout\n            key={index}\n            index={index}\n            handlerOffset={offsetX}\n            visibleRanges={visibleRanges}\n            animationStyle={customAnimation || layoutConfig}\n          >\n            {({ animationValue }) =>\n              renderItem({\n                item,\n                index: realIndex,\n                animationValue,\n              })\n            }\n          </ItemLayout>\n        );\n      })}\n    </>\n  );\n};\n"]}