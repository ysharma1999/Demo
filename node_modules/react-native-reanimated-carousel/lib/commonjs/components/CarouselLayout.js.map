{"version":3,"sources":["CarouselLayout.tsx"],"names":["CarouselLayout","React","forwardRef","_props","ref","props","layout","itemDimensions","testID","loop","autoFillData","data","dataLength","rawDataLength","mode","style","containerStyle","width","height","vertical","autoPlay","windowSize","autoPlayReverse","autoPlayInterval","scrollAnimationDuration","withAnimation","fixedDirection","renderItem","onScrollEnd","onSnapToItem","onScrollStart","onProgressChange","customAnimation","defaultIndex","commonVariables","size","handlerOffset","layoutConfig","offsetX","totalSize","x","value","Number","isNaN","carouselController","duration","_onScrollEnd","getSharedIndex","useCallback","_sharedIndex","Math","round","realIndex","index","startAutoPlay","start","pauseAutoPlay","pause","scrollViewGestureOnScrollStart","scrollViewGestureOnScrollEnd","scrollViewGestureOnTouchBegin","scrollViewGestureOnTouchEnd","layoutStyle","styles","layoutContainer","contentContainer","itemsVertical","itemsHorizontal","StyleSheet","create","display","overflow","flexDirection"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { StyleSheet, type ViewStyle } from \"react-native\";\nimport { GestureHandlerRootView } from \"react-native-gesture-handler\";\nimport { runOnJS, useAnimatedStyle, useDerivedValue } from \"react-native-reanimated\";\nimport { useAutoPlay } from \"../hooks/useAutoPlay\";\nimport { useCarouselController } from \"../hooks/useCarouselController\";\nimport { useCommonVariables } from \"../hooks/useCommonVariables\";\nimport { useLayoutConfig } from \"../hooks/useLayoutConfig\";\nimport { useOnProgressChange } from \"../hooks/useOnProgressChange\";\nimport { useGlobalState } from \"../store\";\nimport { ICarouselInstance } from \"../types\";\nimport { computedRealIndexWithAutoFillData } from \"../utils/computed-with-auto-fill-data\";\nimport { ItemRenderer } from \"./ItemRenderer\";\nimport { ScrollViewGesture } from \"./ScrollViewGesture\";\n\nexport type TAnimationStyle = (value: number) => ViewStyle;\n\nexport const CarouselLayout = React.forwardRef<ICarouselInstance>((_props, ref) => {\n  const { props, layout } = useGlobalState();\n  const { itemDimensions } = layout;\n\n  const {\n    testID,\n    loop,\n    autoFillData,\n    // Fill data with autoFillData\n    data,\n    // Length of fill data\n    dataLength,\n    // Length of raw data\n    rawDataLength,\n    mode,\n    style,\n    containerStyle,\n    width,\n    height,\n    vertical,\n    autoPlay,\n    windowSize,\n    autoPlayReverse,\n    autoPlayInterval,\n    scrollAnimationDuration,\n    withAnimation,\n    fixedDirection,\n    renderItem,\n    onScrollEnd,\n    onSnapToItem,\n    onScrollStart,\n    onProgressChange,\n    customAnimation,\n    defaultIndex,\n  } = props;\n\n  const commonVariables = useCommonVariables(props);\n  const { size, handlerOffset } = commonVariables;\n  const layoutConfig = useLayoutConfig({ ...props, size });\n\n  const offsetX = useDerivedValue(() => {\n    const totalSize = size * dataLength;\n    const x = handlerOffset.value % totalSize;\n\n    if (!loop) return handlerOffset.value;\n\n    return Number.isNaN(x) ? 0 : x;\n  }, [loop, size, dataLength, handlerOffset]);\n\n  useOnProgressChange({\n    autoFillData,\n    loop,\n    size,\n    offsetX,\n    rawDataLength,\n    onProgressChange,\n  });\n\n  const carouselController = useCarouselController({\n    ref,\n    loop,\n    size,\n    dataLength,\n    autoFillData,\n    handlerOffset,\n    withAnimation,\n    defaultIndex,\n    fixedDirection,\n    duration: scrollAnimationDuration,\n    onScrollEnd: () => runOnJS(_onScrollEnd)(),\n    onScrollStart: () => !!onScrollStart && runOnJS(onScrollStart)(),\n  });\n\n  const {\n    getSharedIndex,\n    // index, // Animated index. Could be used for dynamic dimension\n  } = carouselController;\n\n  const _onScrollEnd = React.useCallback(() => {\n    const _sharedIndex = Math.round(getSharedIndex());\n\n    const realIndex = computedRealIndexWithAutoFillData({\n      index: _sharedIndex,\n      dataLength: rawDataLength,\n      loop,\n      autoFillData,\n    });\n\n    if (onSnapToItem) onSnapToItem(realIndex);\n\n    if (onScrollEnd) onScrollEnd(realIndex);\n  }, [loop, autoFillData, rawDataLength, getSharedIndex, onSnapToItem, onScrollEnd]);\n\n  const { start: startAutoPlay, pause: pauseAutoPlay } = useAutoPlay({\n    autoPlay,\n    autoPlayInterval,\n    autoPlayReverse,\n    carouselController,\n  });\n\n  const scrollViewGestureOnScrollStart = React.useCallback(() => {\n    pauseAutoPlay();\n    onScrollStart?.();\n  }, [onScrollStart, pauseAutoPlay]);\n\n  const scrollViewGestureOnScrollEnd = React.useCallback(() => {\n    startAutoPlay();\n    _onScrollEnd();\n  }, [_onScrollEnd, startAutoPlay]);\n\n  const scrollViewGestureOnTouchBegin = React.useCallback(pauseAutoPlay, [pauseAutoPlay]);\n\n  const scrollViewGestureOnTouchEnd = React.useCallback(startAutoPlay, [startAutoPlay]);\n\n  const layoutStyle = useAnimatedStyle(() => {\n    // const dimension = itemDimensions.value[index.value];\n\n    // if (!dimension) {\n    //   return {};\n    // }\n    return {\n      // height: dimension.height, // For dynamic dimension in the future\n\n      width: width || \"100%\", // [width is deprecated]\n      height: height || \"100%\", // [height is deprecated]\n    };\n  }, [width, height, size, itemDimensions]);\n\n  return (\n    <GestureHandlerRootView style={[styles.layoutContainer, containerStyle]}>\n      <ScrollViewGesture\n        size={size}\n        key={mode}\n        translation={handlerOffset}\n        style={[\n          styles.contentContainer, // [deprecated]\n          layoutStyle,\n          style,\n          vertical ? styles.itemsVertical : styles.itemsHorizontal,\n        ]}\n        testID={testID}\n        onScrollStart={scrollViewGestureOnScrollStart}\n        onScrollEnd={scrollViewGestureOnScrollEnd}\n        onTouchBegin={scrollViewGestureOnTouchBegin}\n        onTouchEnd={scrollViewGestureOnTouchEnd}\n      >\n        <ItemRenderer\n          data={data}\n          dataLength={dataLength}\n          rawDataLength={rawDataLength}\n          loop={loop}\n          size={size}\n          windowSize={windowSize}\n          autoFillData={autoFillData}\n          offsetX={offsetX}\n          handlerOffset={handlerOffset}\n          layoutConfig={layoutConfig}\n          renderItem={renderItem}\n          customAnimation={customAnimation}\n        />\n      </ScrollViewGesture>\n    </GestureHandlerRootView>\n  );\n});\n\nconst styles = StyleSheet.create({\n  layoutContainer: {\n    display: \"flex\",\n  },\n  contentContainer: {\n    overflow: \"hidden\",\n  },\n  itemsHorizontal: {\n    flexDirection: \"row\",\n  },\n  itemsVertical: {\n    flexDirection: \"column\",\n  },\n});\n"]}