var _log=require("./log");describe("log utilities",function(){describe("log",function(){var mockConsoleLog=jest.fn();var originalConsoleLog=console.log;beforeEach(function(){console.log=mockConsoleLog;});afterEach(function(){mockConsoleLog.mockClear();console.log=originalConsoleLog;});it("should call console.log with provided arguments",function(){var _expect;var args=["test",123,{key:"value"}];_log.log.apply(void 0,args);(_expect=expect(mockConsoleLog)).toHaveBeenCalledWith.apply(_expect,args);});it("should handle single argument",function(){(0,_log.log)("test");expect(mockConsoleLog).toHaveBeenCalledWith("test");});it("should handle multiple arguments",function(){(0,_log.log)("test",123,true);expect(mockConsoleLog).toHaveBeenCalledWith("test",123,true);});});describe("round",function(){it("should round positive numbers correctly",function(){expect((0,_log.round)(1.4)).toBe(1);expect((0,_log.round)(1.5)).toBe(2);expect((0,_log.round)(1.6)).toBe(2);});it("should round negative numbers correctly",function(){expect((0,_log.round)(-1.4)).toBe(-1);expect((0,_log.round)(-1.5)).toBe(-1);expect((0,_log.round)(-1.6)).toBe(-2);});it("should handle zero values",function(){expect((0,_log.round)(0)).toBe(0);expect((0,_log.round)(-0)).toBe(-0);expect(1/(0,_log.round)(-0)).toBe(Number.NEGATIVE_INFINITY);});it("should handle integers",function(){expect((0,_log.round)(5)).toBe(5);expect((0,_log.round)(-5)).toBe(-5);});it("should handle decimal places",function(){expect((0,_log.round)(Math.PI)).toBe(3);expect((0,_log.round)(-Math.PI)).toBe(-3);});});});
//# sourceMappingURL=log.test.js.map