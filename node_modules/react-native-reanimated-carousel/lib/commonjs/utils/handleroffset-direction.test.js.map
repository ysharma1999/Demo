{"version":3,"sources":["handleroffset-direction.test.ts"],"names":["describe","it","result","handlerOffsetAnimVal","expect","current","toBe"],"mappings":"AAAA,8DAEA,wDAEA,iEAEAA,QAAQ,CAAC,wBAAD,CAA2B,UAAM,CACvCC,EAAE,CAAC,oDAAD,CAAuD,UAAM,CAC7D,GAAMC,CAAAA,MAAM,CAAG,2BAAW,UAAM,CAC9B,GAAMC,CAAAA,oBAAoB,CAAG,0CAAe,CAAf,CAA7B,CACA,MAAO,mDAAuBA,oBAAvB,CAAP,CACD,CAHc,CAAf,CAKAC,MAAM,CAACF,MAAM,CAACA,MAAP,CAAcG,OAAf,CAAN,CAA8BC,IAA9B,CAAmC,CAAC,CAApC,EACD,CAPC,CAAF,CASAL,EAAE,CAAC,yDAAD,CAA4D,UAAM,CAClE,GAAMC,CAAAA,MAAM,CAAG,2BAAW,UAAM,CAC9B,GAAMC,CAAAA,oBAAoB,CAAG,0CAAe,CAAf,CAA7B,CACA,MAAO,mDAAuBA,oBAAvB,CAAP,CACD,CAHc,CAAf,CAKAC,MAAM,CAACF,MAAM,CAACA,MAAP,CAAcG,OAAf,CAAN,CAA8BC,IAA9B,CAAmC,CAAnC,EACD,CAPC,CAAF,CASAL,EAAE,CAAC,uDAAD,CAA0D,UAAM,CAChE,GAAMC,CAAAA,MAAM,CAAG,2BAAW,UAAM,CAC9B,GAAMC,CAAAA,oBAAoB,CAAG,0CAAe,CAAC,CAAhB,CAA7B,CACA,MAAO,mDAAuBA,oBAAvB,CAAP,CACD,CAHc,CAAf,CAKAC,MAAM,CAACF,MAAM,CAACA,MAAP,CAAcG,OAAf,CAAN,CAA8BC,IAA9B,CAAmC,CAAC,CAApC,EACD,CAPC,CAAF,CASAL,EAAE,CAAC,kFAAD,CAAqF,UAAM,CAC3F,GAAMC,CAAAA,MAAM,CAAG,2BAAW,UAAM,CAC9B,GAAMC,CAAAA,oBAAoB,CAAG,0CAAe,CAAC,CAAhB,CAA7B,CACA,MAAO,mDAAuBA,oBAAvB,CAA6C,UAA7C,CAAP,CACD,CAHc,CAAf,CAKAC,MAAM,CAACF,MAAM,CAACA,MAAP,CAAcG,OAAf,CAAN,CAA8BC,IAA9B,CAAmC,CAAnC,EACD,CAPC,CAAF,CASAL,EAAE,CAAC,yFAAD,CAA4F,UAAM,CAClG,GAAMC,CAAAA,MAAM,CAAG,2BAAW,UAAM,CAC9B,GAAMC,CAAAA,oBAAoB,CAAG,0CAAe,CAAf,CAA7B,CACA,MAAO,mDAAuBA,oBAAvB,CAA6C,UAA7C,CAAP,CACD,CAHc,CAAf,CAKAC,MAAM,CAACF,MAAM,CAACA,MAAP,CAAcG,OAAf,CAAN,CAA8BC,IAA9B,CAAmC,CAAC,CAApC,EACD,CAPC,CAAF,CAQD,CA7CO,CAAR","sourcesContent":["import { useSharedValue } from \"react-native-reanimated\";\n\nimport { renderHook } from \"@testing-library/react-hooks\";\n\nimport { handlerOffsetDirection } from \"./handleroffset-direction\";\n\ndescribe(\"handlerOffsetDirection\", () => {\n  it(\"should return -1 when default value equals to zero\", () => {\n    const result = renderHook(() => {\n      const handlerOffsetAnimVal = useSharedValue(0);\n      return handlerOffsetDirection(handlerOffsetAnimVal);\n    });\n\n    expect(result.result.current).toBe(-1);\n  });\n\n  it(\"should return 1 when default value is greater than zero\", () => {\n    const result = renderHook(() => {\n      const handlerOffsetAnimVal = useSharedValue(1);\n      return handlerOffsetDirection(handlerOffsetAnimVal);\n    });\n\n    expect(result.result.current).toBe(1);\n  });\n\n  it(\"should return -1 when default value is less than zero\", () => {\n    const result = renderHook(() => {\n      const handlerOffsetAnimVal = useSharedValue(-1);\n      return handlerOffsetDirection(handlerOffsetAnimVal);\n    });\n\n    expect(result.result.current).toBe(-1);\n  });\n\n  it(\"should return 1 when default value equals to zero and fixedDirection is negative\", () => {\n    const result = renderHook(() => {\n      const handlerOffsetAnimVal = useSharedValue(-1);\n      return handlerOffsetDirection(handlerOffsetAnimVal, \"positive\");\n    });\n\n    expect(result.result.current).toBe(1);\n  });\n\n  it(\"should return -1 when default value is greater than zero and fixedDirection is negative\", () => {\n    const result = renderHook(() => {\n      const handlerOffsetAnimVal = useSharedValue(1);\n      return handlerOffsetDirection(handlerOffsetAnimVal, \"negative\");\n    });\n\n    expect(result.result.current).toBe(-1);\n  });\n});\n"]}