{"version":3,"sources":["computed-with-auto-fill-data.test.ts"],"names":["SINGLE_ITEM","DATA_LENGTH","DOUBLE_ITEM","describe","it","data","result","loop","autoFillData","dataLength","expect","toEqual","size","value","rawDataLength","toBe","index"],"mappings":"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","sourcesContent":["import {\n  computedFillDataWithAutoFillData,\n  computedOffsetXValueWithAutoFillData,\n  computedRealIndexWithAutoFillData,\n  convertToSharedIndex,\n} from \"./computed-with-auto-fill-data\";\n\nimport { DATA_LENGTH } from \"../constants\";\n\nconst { SINGLE_ITEM, DOUBLE_ITEM } = DATA_LENGTH;\n\ndescribe(\"computed-with-auto-fill-data utilities\", () => {\n  describe(\"computedFillDataWithAutoFillData\", () => {\n    it(\"should handle single item\", () => {\n      const data = [1];\n      const result = computedFillDataWithAutoFillData({\n        data,\n        loop: true,\n        autoFillData: true,\n        dataLength: SINGLE_ITEM,\n      });\n\n      expect(result).toEqual([1, 1, 1]);\n    });\n\n    it(\"should handle double items\", () => {\n      const data = [1, 2];\n      const result = computedFillDataWithAutoFillData({\n        data,\n        loop: true,\n        autoFillData: true,\n        dataLength: DOUBLE_ITEM,\n      });\n\n      expect(result).toEqual([1, 2, 1, 2]);\n    });\n\n    it(\"should return original data when autoFillData is false\", () => {\n      const data = [1, 2, 3];\n      const result = computedFillDataWithAutoFillData({\n        data,\n        loop: true,\n        autoFillData: false,\n        dataLength: 3,\n      });\n\n      expect(result).toEqual(data);\n    });\n\n    it(\"should return original data when loop is false\", () => {\n      const data = [1, 2, 3];\n      const result = computedFillDataWithAutoFillData({\n        data,\n        loop: false,\n        autoFillData: true,\n        dataLength: 3,\n      });\n\n      expect(result).toEqual(data);\n    });\n  });\n\n  describe(\"computedOffsetXValueWithAutoFillData\", () => {\n    const size = 300;\n\n    it(\"should handle single item\", () => {\n      const result = computedOffsetXValueWithAutoFillData({\n        value: size * 2,\n        size,\n        rawDataLength: SINGLE_ITEM,\n        loop: true,\n        autoFillData: true,\n      });\n\n      expect(result).toBe(0); // value % size\n    });\n\n    it(\"should handle double items\", () => {\n      const result = computedOffsetXValueWithAutoFillData({\n        value: size * 3,\n        size,\n        rawDataLength: DOUBLE_ITEM,\n        loop: true,\n        autoFillData: true,\n      });\n\n      expect(result).toBe(size * 1); // value % (size * 2)\n    });\n\n    it(\"should return original value when autoFillData is false\", () => {\n      const value = size * 2;\n      const result = computedOffsetXValueWithAutoFillData({\n        value,\n        size,\n        rawDataLength: 3,\n        loop: true,\n        autoFillData: false,\n      });\n\n      expect(result).toBe(value);\n    });\n\n    it(\"should return original value when loop is false\", () => {\n      const value = size * 2;\n      const result = computedOffsetXValueWithAutoFillData({\n        value,\n        size,\n        rawDataLength: 3,\n        loop: false,\n        autoFillData: true,\n      });\n\n      expect(result).toBe(value);\n    });\n  });\n\n  describe(\"computedRealIndexWithAutoFillData\", () => {\n    it(\"should handle single item\", () => {\n      const result = computedRealIndexWithAutoFillData({\n        index: 2,\n        dataLength: SINGLE_ITEM,\n        loop: true,\n        autoFillData: true,\n      });\n\n      expect(result).toBe(0); // index % 1\n    });\n\n    it(\"should handle double items\", () => {\n      const result = computedRealIndexWithAutoFillData({\n        index: 3,\n        dataLength: DOUBLE_ITEM,\n        loop: true,\n        autoFillData: true,\n      });\n\n      expect(result).toBe(1); // index % 2\n    });\n\n    it(\"should return original index when autoFillData is false\", () => {\n      const index = 2;\n      const result = computedRealIndexWithAutoFillData({\n        index,\n        dataLength: 3,\n        loop: true,\n        autoFillData: false,\n      });\n\n      expect(result).toBe(index);\n    });\n\n    it(\"should return original index when loop is false\", () => {\n      const index = 2;\n      const result = computedRealIndexWithAutoFillData({\n        index,\n        dataLength: 3,\n        loop: false,\n        autoFillData: true,\n      });\n\n      expect(result).toBe(index);\n    });\n  });\n\n  describe(\"convertToSharedIndex\", () => {\n    it(\"should handle single item\", () => {\n      const result = convertToSharedIndex({\n        index: 2,\n        rawDataLength: SINGLE_ITEM,\n        loop: true,\n        autoFillData: true,\n      });\n\n      expect(result).toBe(0);\n    });\n\n    it(\"should handle double items\", () => {\n      const result = convertToSharedIndex({\n        index: 3,\n        rawDataLength: DOUBLE_ITEM,\n        loop: true,\n        autoFillData: true,\n      });\n\n      expect(result).toBe(1); // index % 2\n    });\n\n    it(\"should return original index when autoFillData is false\", () => {\n      const index = 2;\n      const result = convertToSharedIndex({\n        index,\n        rawDataLength: 3,\n        loop: true,\n        autoFillData: false,\n      });\n\n      expect(result).toBe(index);\n    });\n\n    it(\"should return original index when loop is false\", () => {\n      const index = 2;\n      const result = convertToSharedIndex({\n        index,\n        rawDataLength: 3,\n        loop: false,\n        autoFillData: true,\n      });\n\n      expect(result).toBe(index);\n    });\n  });\n});\n"]}