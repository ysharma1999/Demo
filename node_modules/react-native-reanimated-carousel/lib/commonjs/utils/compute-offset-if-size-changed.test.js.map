{"version":3,"sources":["compute-offset-if-size-changed.test.ts"],"names":["describe","it","prevIndex","prevSize","size","handlerOffset","result","finallyIndex","expect","toEqual"],"mappings":"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","sourcesContent":["import { computeOffsetIfSizeChanged } from \"./compute-offset-if-size-changed\";\n\ndescribe(\"computeOffsetIfSizeChanged\", () => {\n  it(\"[CASE 1] should return the correct values when size does not change\", () => {\n    const prevIndex = 1;\n    const prevSize = 500;\n    const size = 500;\n    const handlerOffset = prevIndex * size;\n    const result = computeOffsetIfSizeChanged({\n      prevSize,\n      size,\n      handlerOffset,\n    });\n\n    const finallyIndex = result / size;\n    expect(finallyIndex).toEqual(prevIndex);\n  });\n\n  it(\"[CASE 2] should return the correct values when size changes from 500 to 400\", () => {\n    const prevIndex = 1;\n    const prevSize = 500;\n    const size = 400;\n    const handlerOffset = prevIndex * prevSize;\n    const result = computeOffsetIfSizeChanged({\n      prevSize,\n      size,\n      handlerOffset,\n    });\n\n    const finallyIndex = result / size;\n    expect(finallyIndex).toEqual(prevIndex);\n  });\n\n  it(\"[CASE 3] should return the correct values when size changes from 500 to 499\", () => {\n    const prevIndex = 1;\n    const prevSize = 500;\n    const size = 499;\n    const handlerOffset = prevIndex * prevSize;\n    const result = computeOffsetIfSizeChanged({\n      prevSize,\n      size,\n      handlerOffset,\n    });\n\n    const finallyIndex = result / size;\n    expect(finallyIndex).toEqual(prevIndex);\n  });\n\n  it(\"[CASE 4] should return the correct values when size changes from 500 to 501\", () => {\n    const prevIndex = 1;\n    const prevSize = 500;\n    const size = 501;\n    const handlerOffset = prevIndex * prevSize;\n    const result = computeOffsetIfSizeChanged({\n      prevSize,\n      size,\n      handlerOffset,\n    });\n\n    const finallyIndex = result / size;\n    expect(finallyIndex).toEqual(prevIndex);\n  });\n\n  it(\"[CASE 5] should return the correct values when size changes from 224 to 524\", () => {\n    const prevIndex = 1;\n    const prevSize = 224;\n    const size = 524;\n    const handlerOffset = prevIndex * prevSize;\n    const result = computeOffsetIfSizeChanged({\n      prevSize,\n      size,\n      handlerOffset,\n    });\n\n    const finallyIndex = result / size;\n    expect(finallyIndex).toEqual(prevIndex);\n  });\n});\n"]}